###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         29/Aug/2017  18:30:01 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-C #
#                          C2530-r200\Projects\SappWsn\Source\SAPP_FrameWork. #
#                          c                                                  #
#    Command line       =  -f D:\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStac #
#                          k-CC2530-r200\Projects\SappWsn\..\zstack\Tools\CC2 #
#                          530DB\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func  #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f D:\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStac #
#                          k-CC2530-r200\Projects\SappWsn\..\zstack\Tools\CC2 #
#                          530DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0        #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x0045                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 D:\zigbee实验\实验指导书\Co #
#                          de\Cap2_ZStack\ZStack-CC2530-r200\Projects\SappWsn #
#                          \Source\SAPP_FrameWork.c -D ZTOOL_P1 -D MT_TASK    #
#                          -D MT_SYS_FUNC -D MT_ZDO_FUNC -D SAPP_ZSTACK -lC   #
#                          D:\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-C #
#                          C2530-r200\Projects\SappWsn\CoordinatorEB\List\    #
#                          -lA D:\zigbee实验\实验指导书\Code\Cap2_ZStack\ZSta #
#                          ck-CC2530-r200\Projects\SappWsn\CoordinatorEB\List #
#                          \ --diag_suppress Pe001,Pa010 -o                   #
#                          D:\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-C #
#                          C2530-r200\Projects\SappWsn\CoordinatorEB\Obj\ -e  #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I D:\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStac #
#                          k-CC2530-r200\Projects\SappWsn\ -I                 #
#                          D:\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-C #
#                          C2530-r200\Projects\SappWsn\Source\ -I             #
#                          D:\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-C #
#                          C2530-r200\Projects\SappWsn\..\zstack\ZMain\TI2530 #
#                          DB\ -I D:\zigbee实验\实验指导书\Code\Cap2_ZStack\Z #
#                          Stack-CC2530-r200\Projects\SappWsn\..\..\Component #
#                          s\hal\include\ -I D:\zigbee实验\实验指导书\Code\Ca #
#                          p2_ZStack\ZStack-CC2530-r200\Projects\SappWsn\..\. #
#                          .\Components\hal\target\CC2530EB\ -I               #
#                          D:\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-C #
#                          C2530-r200\Projects\SappWsn\..\..\Components\mac\i #
#                          nclude\ -I D:\zigbee实验\实验指导书\Code\Cap2_ZSta #
#                          ck\ZStack-CC2530-r200\Projects\SappWsn\..\..\Compo #
#                          nents\mac\high_level\ -I                           #
#                          D:\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-C #
#                          C2530-r200\Projects\SappWsn\..\..\Components\mac\l #
#                          ow_level\srf04\ -I D:\zigbee实验\实验指导书\Code\C #
#                          ap2_ZStack\ZStack-CC2530-r200\Projects\SappWsn\..\ #
#                          ..\Components\mac\low_level\srf04\single_chip\ -I  #
#                          D:\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-C #
#                          C2530-r200\Projects\SappWsn\..\..\Components\mt\   #
#                          -I D:\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStac #
#                          k-CC2530-r200\Projects\SappWsn\..\..\Components\os #
#                          al\include\ -I D:\zigbee实验\实验指导书\Code\Cap2_ #
#                          ZStack\ZStack-CC2530-r200\Projects\SappWsn\..\..\C #
#                          omponents\services\saddr\ -I                       #
#                          D:\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-C #
#                          C2530-r200\Projects\SappWsn\..\..\Components\servi #
#                          ces\sdata\ -I D:\zigbee实验\实验指导书\Code\Cap2_Z #
#                          Stack\ZStack-CC2530-r200\Projects\SappWsn\..\..\Co #
#                          mponents\stack\af\ -I D:\zigbee实验\实验指导书\Cod #
#                          e\Cap2_ZStack\ZStack-CC2530-r200\Projects\SappWsn\ #
#                          ..\..\Components\stack\nwk\ -I                     #
#                          D:\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-C #
#                          C2530-r200\Projects\SappWsn\..\..\Components\stack #
#                          \sapi\ -I D:\zigbee实验\实验指导书\Code\Cap2_ZStac #
#                          k\ZStack-CC2530-r200\Projects\SappWsn\..\..\Compon #
#                          ents\stack\sec\ -I D:\zigbee实验\实验指导书\Code\C #
#                          ap2_ZStack\ZStack-CC2530-r200\Projects\SappWsn\..\ #
#                          ..\Components\stack\sys\ -I                        #
#                          D:\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-C #
#                          C2530-r200\Projects\SappWsn\..\..\Components\stack #
#                          \zdo\ -I D:\zigbee实验\实验指导书\Code\Cap2_ZStack #
#                          \ZStack-CC2530-r200\Projects\SappWsn\..\..\Compone #
#                          nts\zmac\ -I D:\zigbee实验\实验指导书\Code\Cap2_ZS #
#                          tack\ZStack-CC2530-r200\Projects\SappWsn\..\..\Com #
#                          ponents\zmac\f8w\ -Ohz --require_prototypes        #
#    List file          =  D:\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-C #
#                          C2530-r200\Projects\SappWsn\CoordinatorEB\List\SAP #
#                          P_FrameWork.lst                                    #
#    Object file        =  D:\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-C #
#                          C2530-r200\Projects\SappWsn\CoordinatorEB\Obj\SAPP #
#                          _FrameWork.r51                                     #
#                                                                             #
#                                                                             #
###############################################################################

D:\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\Projects\SappWsn\Source\SAPP_FrameWork.c
      1          #if defined(SAPP_ZSTACK)
      2          #include "SAPP_FrameWork.h"
      3          #include <string.h>
      4          
      5          /*********************************************************************
      6           * FUNCTIONS
      7           *********************************************************************/
      8          static void createEndPoint(struct ep_info_t *epInfo, uint8 *task_id, uint8 ep);
      9          #if defined(ZDO_COORDINATOR)
     10          static uint8 uartMsgProcesser(uint8 *msg);
     11          #endif
     12          
     13          /*********************************************************************
     14           * Local Variables
     15           *********************************************************************/
     16          //uint8 ctrlBuffer[sizeof(TOPOINFO) + sizeof(FUNCTABLE) + FUNC_NUM * sizeof(FUNCINFO)];

   \                                 In  segment XDATA_I, align 1, keep-with-next
     17          static TOPOINFO topoBuffer = { 0x02 };
   \                     topoBuffer:
   \   000000                DS 14
   \   00000E                REQUIRE `?<Initializer for topoBuffer>`
   \   00000E                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     18          FUNCTABLE *funcTableBuffer;// = (FUNCTABLE *)(&ctrlBuffer[sizeof(TOPOINFO)]);
   \                     funcTableBuffer:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     19          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     20          static devStates_t curNwkState;
   \                     curNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     21          static uint8 controlTaskId;
   \                     controlTaskId:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     22          static uint8 functionTaskId;
   \                     functionTaskId:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     23          static struct ep_info_t controlEndPointInfo;
   \                     controlEndPointInfo:
   \   000000                DS 33
   \   000021                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     24          static uint8 isUserTimerRunning = 0;
   \                     isUserTimerRunning:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     25          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     26          void sapp_taskInitProcess(void)
   \                     sapp_taskInitProcess:
     27          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     28           #if defined ( BUILD_ALL_DEVICES )
     29              // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
     30              // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
     31              // together - if they are - we will start up a coordinator. Otherwise,
     32              // the device will start as a router.
     33              if ( readCoordinatorJumper() )
     34                  zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
     35              else
     36                  zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
     37          #endif // BUILD_ALL_DEVICES
     38          
     39          #if defined ( HOLD_AUTO_START )
     40              // HOLD_AUTO_START is a compile option that will surpress ZDApp
     41              //  from starting the device and wait for the application to
     42              //  start the device.
     43              ZDOInitDevice(0);
     44          #endif
     45          
     46              // 构造功能列表
     47              funcTableBuffer = createFuncTable(funcCount);
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005   90....       MOV     DPTR,#funcCount
   \   000008   E0           MOVX    A,@DPTR
   \   000009   75F003       MOV     B,#0x3
   \   00000C   A4           MUL     AB
   \   00000D   2402         ADD     A,#0x2
   \   00000F   FA           MOV     R2,A
   \   000010   E5F0         MOV     A,B
   \   000012   3400         ADDC    A,#0x0
   \   000014   FB           MOV     R3,A
   \   000015   12....       LCALL   ??osal_mem_alloc?relay
   \   000018   90....       MOV     DPTR,#funcTableBuffer
   \   00001B   EA           MOV     A,R2
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   EB           MOV     A,R3
   \   00001F   F0           MOVX    @DPTR,A
     48              funcTableBuffer->ft_type = 0x01;
   \   000020   90....       MOV     DPTR,#funcTableBuffer
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F8           MOV     R0,A
   \   000025   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000028   7401         MOV     A,#0x1
   \   00002A   F0           MOVX    @DPTR,A
     49              funcTableBuffer->ft_count = funcCount;
   \   00002B   90....       MOV     DPTR,#funcCount
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   C0E0         PUSH    A
   \   000031   90....       MOV     DPTR,#funcTableBuffer
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F8           MOV     R0,A
   \   000036   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000039   A3           INC     DPTR
   \   00003A   D0E0         POP     A
   \   00003C   F0           MOVX    @DPTR,A
     50              int i;
     51              for(i = 0; i < funcCount; i++)
   \   00003D   7E00         MOV     R6,#0x0
   \   00003F   7F00         MOV     R7,#0x0
   \   000041   804D         SJMP    ??CrossCallReturnLabel_24
     52              {
     53                  funcTableBuffer->ft_list[i].type = funcList[i].function.type;
   \                     ??sapp_taskInitProcess_0:
   \   000043   12....       LCALL   ?Subroutine20 & 0xFFFF
     54                  funcTableBuffer->ft_list[i].id = funcList[i].function.id;
     55                  funcTableBuffer->ft_list[i].cycle = funcList[i].function.cycle;
     56              }
   \                     ??CrossCallReturnLabel_40:
   \   000046   F8           MOV     R0,A
   \   000047   74..         MOV     A,#(funcList >> 8) & 0xff
   \   000049   39           ADDC    A,R1
   \   00004A   F9           MOV     R1,A
   \   00004B   E8           MOV     A,R0
   \   00004C   FA           MOV     R2,A
   \   00004D   E9           MOV     A,R1
   \   00004E   FB           MOV     R3,A
   \   00004F   EE           MOV     A,R6
   \   000050   F8           MOV     R0,A
   \   000051   EF           MOV     A,R7
   \   000052   F9           MOV     R1,A
   \   000053   E8           MOV     A,R0
   \   000054   75F003       MOV     B,#0x3
   \   000057   A4           MUL     AB
   \   000058   F8           MOV     R0,A
   \   000059   ACF0         MOV     R4,B
   \   00005B   75F003       MOV     B,#0x3
   \   00005E   E9           MOV     A,R1
   \   00005F   A4           MUL     AB
   \   000060   2C           ADD     A,R4
   \   000061   F9           MOV     R1,A
   \   000062   8A82         MOV     DPL,R2
   \   000064   8B83         MOV     DPH,R3
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   C0E0         PUSH    A
   \   000071   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000074   D0E0         POP     A
   \   000076   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   C0E0         PUSH    A
   \   00007C   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00007F   A3           INC     DPTR
   \   000080   D0E0         POP     A
   \   000082   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000085   C0E0         PUSH    A
   \   000087   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00008A   D0E0         POP     A
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000090   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000093   40AE         JC      ??sapp_taskInitProcess_0
     57              controlTaskId = tasksCnt - 2;
   \   000095   90....       MOV     DPTR,#tasksCnt
   \   000098   E0           MOVX    A,@DPTR
   \   000099   24FE         ADD     A,#-0x2
   \   00009B   90....       MOV     DPTR,#controlTaskId
   \   00009E   F0           MOVX    @DPTR,A
     58              functionTaskId = tasksCnt - 1;
   \   00009F   90....       MOV     DPTR,#tasksCnt
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   14           DEC     A
   \   0000A4   90....       MOV     DPTR,#functionTaskId
   \   0000A7   F0           MOVX    @DPTR,A
     59              HalIOInit(functionTaskId);
   \   0000A8                ; Setup parameters for call to function HalIOInit
   \   0000A8   F9           MOV     R1,A
   \   0000A9   12....       LCALL   ??HalIOInit?relay
     60              createEndPoint(&controlEndPointInfo, &controlTaskId, CONTROL_ENDPOINT);
   \   0000AC                ; Setup parameters for call to function createEndPoint
   \   0000AC   79F0         MOV     R1,#-0x10
   \   0000AE   7C..         MOV     R4,#controlTaskId & 0xff
   \   0000B0   7D..         MOV     R5,#(controlTaskId >> 8) & 0xff
   \   0000B2   7A..         MOV     R2,#controlEndPointInfo & 0xff
   \   0000B4   7B..         MOV     R3,#(controlEndPointInfo >> 8) & 0xff
   \   0000B6   12....       LCALL   ??createEndPoint?relay
     61              for(i = 0; i < funcCount; i++)
   \   0000B9   7E00         MOV     R6,#0x0
   \   0000BB   7F00         MOV     R7,#0x0
   \   0000BD   8036         SJMP    ??CrossCallReturnLabel_25
     62              {
     63                  struct ep_info_t *ep = &funcList[i];
   \                     ??sapp_taskInitProcess_1:
   \   0000BF   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0000C2   F5..         MOV     ?V0 + 0,A
   \   0000C4   74..         MOV     A,#(funcList >> 8) & 0xff
   \   0000C6   39           ADDC    A,R1
   \   0000C7   F5..         MOV     ?V0 + 1,A
     64                  createEndPoint(ep, &functionTaskId, i + 1);
   \   0000C9                ; Setup parameters for call to function createEndPoint
   \   0000C9   EE           MOV     A,R6
   \   0000CA   04           INC     A
   \   0000CB   F9           MOV     R1,A
   \   0000CC   7C..         MOV     R4,#functionTaskId & 0xff
   \   0000CE   7D..         MOV     R5,#(functionTaskId >> 8) & 0xff
   \   0000D0   AA..         MOV     R2,?V0 + 0
   \   0000D2   AB..         MOV     R3,?V0 + 1
   \   0000D4   12....       LCALL   ??createEndPoint?relay
     65                  if(ep->res_available)
   \   0000D7   85..82       MOV     DPL,?V0 + 0
   \   0000DA   85..83       MOV     DPH,?V0 + 1
   \   0000DD   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   0000E0   6010         JZ      ??sapp_taskInitProcess_2
     66                    (*ep->res_available)(ep, ResInit, NULL);
   \   0000E2                ; Setup parameters for indirect call
   \   0000E2   7C00         MOV     R4,#0x0
   \   0000E4   7D00         MOV     R5,#0x0
   \   0000E6   7901         MOV     R1,#0x1
   \   0000E8   AA..         MOV     R2,?V0 + 0
   \   0000EA   AB..         MOV     R3,?V0 + 1
   \   0000EC   12....       LCALL   ?Subroutine4 & 0xFFFF
     67              }
   \                     ??CrossCallReturnLabel_77:
   \   0000EF   12....       LCALL   ?CALL_IND
   \                     ??sapp_taskInitProcess_2:
   \   0000F2   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000F5   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000F8   40C5         JC      ??sapp_taskInitProcess_1
     68          #if defined(ZDO_COORDINATOR)// || defined(RTR_NWK)
     69          //    RegisterForKeys( SampleApp_TaskID );
     70              MT_UartRegisterTaskID(controlTaskId);
   \   0000FA                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   0000FA   90....       MOV     DPTR,#controlTaskId
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   F9           MOV     R1,A
   \   0000FF   12....       LCALL   ??MT_UartRegisterTaskID?relay
     71          #endif
     72          }
   \   000102                REQUIRE ?Subroutine0
   \   000102                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   EE           MOV     A,R6
   \   000001   F8           MOV     R0,A
   \   000002   EF           MOV     A,R7
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   75F021       MOV     B,#0x21
   \   000008   A4           MUL     AB
   \   000009   F8           MOV     R0,A
   \   00000A   AAF0         MOV     R2,B
   \   00000C   75F021       MOV     B,#0x21
   \   00000F   E9           MOV     A,R1
   \   000010                REQUIRE ??Subroutine28_0
   \   000010                ; // Fall through to label ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   A4           MUL     AB
   \   000001   2A           ADD     A,R2
   \   000002   F9           MOV     R1,A
   \   000003   74..         MOV     A,#funcList & 0xff
   \   000005   28           ADD     A,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   90....       MOV     DPTR,#funcTableBuffer
   \   000003   E0           MOVX    A,@DPTR
   \   000004   28           ADD     A,R0
   \   000005   FC           MOV     R4,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   39           ADDC    A,R1
   \   000009   8C82         MOV     DPL,R4
   \   00000B   F583         MOV     DPH,A
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine31_0
   \   000002                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine32_0
   \   000002                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine33_0
   \   000001                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine34_0
   \   000001                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   49           ORL     A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   EE           MOV     A,R6
   \   000001   2401         ADD     A,#0x1
   \   000003   0E           INC     R6
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FF           MOV     R7,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   90....       MOV     DPTR,#funcTableBuffer
   \   000003   E0           MOVX    A,@DPTR
   \   000004   28           ADD     A,R0
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   39           ADDC    A,R1
   \   000009   8A82         MOV     DPL,R2
   \   00000B   F583         MOV     DPH,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A                REQUIRE ??Subroutine37_0
   \   00000A                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F583         MOV     DPH,A
   \   000004   8882         MOV     DPL,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   90....       MOV     DPTR,#funcCount
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   C3           CLR     C
   \   000006   EE           MOV     A,R6
   \   000007   98           SUBB    A,R0
   \   000008   EF           MOV     A,R7
   \   000009   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   9400         SUBB    A,#0x0
   \   000002   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000004   65D0         XRL     A,PSW
   \   000006   33           RLC     A
   \   000007   22           RET
     73          /*********************************************************************
     74           * LOCAL FUNCTIONS
     75           */
     76          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     77          static void createEndPoint(struct ep_info_t *epInfo, uint8 *task_id, uint8 ep)
   \                     createEndPoint:
     78          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
     79              static cId_t commonClusterId = SAPP_PERIODIC_CLUSTERID;
     80              // Fill out the endpoint description.
     81              epInfo->task_id = *task_id;
   \   000007   8C82         MOV     DPL,R4
   \   000009   8D83         MOV     DPH,R5
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   C0E0         PUSH    A
   \   00000E   EA           MOV     A,R2
   \   00000F   240C         ADD     A,#0xc
   \   000011   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000014   D0E0         POP     A
   \   000016   F0           MOVX    @DPTR,A
     82              epInfo->ep = ep;
   \   000017   EA           MOV     A,R2
   \   000018   240B         ADD     A,#0xb
   \   00001A   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00001D   E9           MOV     A,R1
   \   00001E   12....       LCALL   ?Subroutine17 & 0xFFFF
     83              epInfo->timerTick = epInfo->function.cycle;
   \                     ??CrossCallReturnLabel_19:
   \   000021   C0E0         PUSH    A
   \   000023   EA           MOV     A,R2
   \   000024   240D         ADD     A,#0xd
   \   000026   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000029   D0E0         POP     A
   \   00002B   F0           MOVX    @DPTR,A
     84              epInfo->userTimer = 0;
   \   00002C   12....       LCALL   ?Subroutine13 & 0xFFFF
     85          
     86              epInfo->simpleDesc.EndPoint = ep;
   \                     ??CrossCallReturnLabel_88:
   \   00002F   EA           MOV     A,R2
   \   000030   2415         ADD     A,#0x15
   \   000032   F5..         MOV     ?V0 + 0,A
   \   000034   EB           MOV     A,R3
   \   000035   3400         ADDC    A,#0x0
   \   000037   F5..         MOV     ?V0 + 1,A
   \   000039   EE           MOV     A,R6
   \   00003A   85..82       MOV     DPL,?V0 + 0
   \   00003D   85..83       MOV     DPH,?V0 + 1
   \   000040   F0           MOVX    @DPTR,A
     87              epInfo->simpleDesc.AppProfId = SAPP_PROFID;
   \   000041   EA           MOV     A,R2
   \   000042   2416         ADD     A,#0x16
   \   000044   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000047   7408         MOV     A,#0x8
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   A3           INC     DPTR
   \   00004B   740F         MOV     A,#0xf
   \   00004D   F0           MOVX    @DPTR,A
     88              epInfo->simpleDesc.AppDeviceId = SAPP_DEVICEID;
   \   00004E   EA           MOV     A,R2
   \   00004F   2418         ADD     A,#0x18
   \   000051   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000054   7401         MOV     A,#0x1
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   E4           CLR     A
   \   000059   F0           MOVX    @DPTR,A
     89              epInfo->simpleDesc.AppDevVer = SAPP_DEVICE_VERSION;
     90              epInfo->simpleDesc.Reserved = 0;
   \   00005A   EA           MOV     A,R2
   \   00005B   241A         ADD     A,#0x1a
   \   00005D   12....       LCALL   ??Subroutine41_0 & 0xFFFF
     91              epInfo->simpleDesc.AppNumInClusters = 1;
   \                     ??CrossCallReturnLabel_86:
   \   000060   EA           MOV     A,R2
   \   000061   241B         ADD     A,#0x1b
   \   000063   12....       LCALL   ?Subroutine15 & 0xFFFF
     92              epInfo->simpleDesc.pAppInClusterList = &commonClusterId;
   \                     ??CrossCallReturnLabel_16:
   \   000066   241C         ADD     A,#0x1c
   \   000068   12....       LCALL   ?Subroutine14 & 0xFFFF
     93              epInfo->simpleDesc.AppNumOutClusters = 1;
   \                     ??CrossCallReturnLabel_14:
   \   00006B   241E         ADD     A,#0x1e
   \   00006D   12....       LCALL   ?Subroutine15 & 0xFFFF
     94              epInfo->simpleDesc.pAppOutClusterList = &commonClusterId;
   \                     ??CrossCallReturnLabel_17:
   \   000070   241F         ADD     A,#0x1f
   \   000072   12....       LCALL   ?Subroutine14 & 0xFFFF
     95          
     96              epInfo->SampleApp_epDesc.endPoint = ep;
   \                     ??CrossCallReturnLabel_15:
   \   000075   240F         ADD     A,#0xf
   \   000077   F8           MOV     R0,A
   \   000078   EB           MOV     A,R3
   \   000079   3400         ADDC    A,#0x0
   \   00007B   F9           MOV     R1,A
   \   00007C   EE           MOV     A,R6
   \   00007D   8882         MOV     DPL,R0
   \   00007F   8983         MOV     DPH,R1
   \   000081   F0           MOVX    @DPTR,A
     97              epInfo->SampleApp_epDesc.task_id = task_id;
   \   000082   EA           MOV     A,R2
   \   000083   2410         ADD     A,#0x10
   \   000085   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000088   EC           MOV     A,R4
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   ED           MOV     A,R5
   \   00008C   F0           MOVX    @DPTR,A
     98              epInfo->SampleApp_epDesc.simpleDesc = &epInfo->simpleDesc;
   \   00008D   EA           MOV     A,R2
   \   00008E   2412         ADD     A,#0x12
   \   000090   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000093   E5..         MOV     A,?V0 + 0
   \   000095   F0           MOVX    @DPTR,A
   \   000096   A3           INC     DPTR
   \   000097   E5..         MOV     A,?V0 + 1
   \   000099   F0           MOVX    @DPTR,A
     99              epInfo->SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   00009A   EA           MOV     A,R2
   \   00009B   2414         ADD     A,#0x14
   \   00009D   12....       LCALL   ??Subroutine41_0 & 0xFFFF
    100          
    101              // Register the endpoint description with the AF
    102              afRegister(&epInfo->SampleApp_epDesc);
   \                     ??CrossCallReturnLabel_87:
   \   0000A0                ; Setup parameters for call to function afRegister
   \   0000A0   E8           MOV     A,R0
   \   0000A1   FA           MOV     R2,A
   \   0000A2   E9           MOV     A,R1
   \   0000A3   FB           MOV     R3,A
   \   0000A4   12....       LCALL   ??afRegister?relay
    103          }
   \   0000A7   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F582         MOV     DPL,A
   \   000002   EB           MOV     A,R3
   \   000003                REQUIRE ??Subroutine35_0
   \   000003                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000003   7401         MOV     A,#0x1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   EA           MOV     A,R2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000003   74..         MOV     A,#??commonClusterId & 0xff
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   74..         MOV     A,#(??commonClusterId >> 8) & 0xff
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   EA           MOV     A,R2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   F582         MOV     DPL,A
   \   000002   EB           MOV     A,R3
   \   000003                REQUIRE ??Subroutine40_0
   \   000003                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   EA           MOV     A,R2
   \   000001   240E         ADD     A,#0xe
   \   000003                REQUIRE ??Subroutine41_0
   \   000003                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     ??commonClusterId:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for commonClusterId>`
   \   000002                REQUIRE __INIT_XDATA_I
    104          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   39           ADDC    A,R1
   \   000001   FB           MOV     R3,A
   \   000002                REQUIRE ??Subroutine29_0
   \   000002                ; // Fall through to label ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine30_0
   \   000004                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    105          uint16 sapp_controlEpProcess(uint8 task_id, uint16 events)
   \                     sapp_controlEpProcess:
    106          {
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 4,R1
   \   00000C   8A..         MOV     ?V0 + 2,R2
   \   00000E   8B..         MOV     ?V0 + 3,R3
    107              afIncomingMSGPacket_t *MSGpkt;
    108          
    109              if ( events & SYS_EVENT_MSG )
   \   000010   EB           MOV     A,R3
   \   000011   5480         ANL     A,#0x80
   \   000013   7003         JNZ     $+5
   \   000015   02....       LJMP    ??sapp_controlEpProcess_0 & 0xFFFF
    110              {
    111                  MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive(task_id);
   \   000018                ; Setup parameters for call to function osal_msg_receive
   \   000018   02....       LJMP    ??sapp_controlEpProcess_1 & 0xFFFF
    112                  while ( MSGpkt )
    113                  {
    114                      switch ( MSGpkt->hdr.event )
    115                      {
    116          #if defined(ZDO_COORDINATOR)
    117                      case CMD_SERIAL_MSG:
    118          //                SampleApp_UartMessage((uint8 *)MSGpkt);
    119                          uartMsgProcesser((uint8 *)MSGpkt);
    120                          HalLedBlink( HAL_LED_1, 2, 50, 90 );
    121                          break;
    122          #endif
    123                          // Received when a messages is received (OTA) for this endpoint
    124                      case AF_INCOMING_MSG_CMD:
    125                      {
    126                          // TODO: QueryProfile or QueryTopo
    127                          switch(MSGpkt->clusterId)
    128                          {
    129                          case SAPP_PERIODIC_CLUSTERID:
    130                              switch(MSGpkt->cmd.Data[0])
    131                              {
    132                              case 0x01:
    133                                  // CtrlQueryProfile
    134                                  // 获取到数据包的来源地址来当做发送数据的目标
    135                                  SendData(CONTROL_ENDPOINT, funcTableBuffer->ft_data, MSGpkt->srcAddr.addr.shortAddr, MSGpkt->srcAddr.endPoint, sizeof(FUNCTABLE) + funcCount * sizeof(FUNCINFO));
    136                                  break;
    137                              case 0x02:
    138                                  // CtrlQueryTopo
    139                                  // 获取到数据包的来源地址来当做发送数据的目标
    140                                  SendData(CONTROL_ENDPOINT, (unsigned char *)&topoBuffer, MSGpkt->srcAddr.addr.shortAddr, MSGpkt->srcAddr.endPoint, sizeof(TOPOINFO));
    141                                  break;
    142                              case 0x03:
    143                                  // CtrlQuerySpecialFunction
    144                                  // cmd.Data[0] = 3, cmd.Data[1] = funcCode, cmd.Data[2] = funcID
    145                                  {
    146                                      uint8 i;
    147                                      for(i = 0; i < funcTableBuffer->ft_count; i++)
    148                                      {
    149                                          if((funcTableBuffer->ft_list[i].type == MSGpkt->cmd.Data[1])
    150                                             && (funcTableBuffer->ft_list[i].id == MSGpkt->cmd.Data[2]))
    151                                          {
    152                                              // 0x03, EndPoint, rCycle
    153                                              uint8 specialFunc[3] = { 0x03, i + 1, funcTableBuffer->ft_list[i].cycle };
    154                                              SendData(CONTROL_ENDPOINT, specialFunc, MSGpkt->srcAddr.addr.shortAddr, MSGpkt->srcAddr.endPoint, sizeof(specialFunc));
    155                                              break;
    156                                          }
    157                                      }
    158                                  }
    159                                  break;
    160                              default:
    161                                  {
    162                                      int i;
    163                                      for(i = 0; i < funcCount; i++)
    164                                      {
    165                                          struct ep_info_t *ep = &funcList[i];
    166                                          if(ep->res_available)   (*ep->res_available)(ep, ResControlPkg, MSGpkt);
    167                                      }
    168                                  }
    169                                  break;
    170                              }
    171                              HalLedBlink( HAL_LED_2, 1, 50, 250 );
    172                              break;
    173                          }
    174                          break;
    175                      }
    176                      // Received whenever the device changes state in the network
    177                      case ZDO_STATE_CHANGE:
    178                      {
    179                          devStates_t st = (devStates_t)(MSGpkt->hdr.status);
   \                     ??sapp_controlEpProcess_2:
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F8           MOV     R0,A
    180                          if ( (st == DEV_ZB_COORD)
    181                                  || (st == DEV_ROUTER)
    182                                  || (st == DEV_END_DEVICE) )
   \   00001E   7409         MOV     A,#0x9
   \   000020   68           XRL     A,R0
   \   000021   600D         JZ      ??sapp_controlEpProcess_3
   \   000023   7407         MOV     A,#0x7
   \   000025   68           XRL     A,R0
   \   000026   6008         JZ      ??sapp_controlEpProcess_3
   \   000028   7406         MOV     A,#0x6
   \   00002A   68           XRL     A,R0
   \   00002B   6003         JZ      $+5
   \   00002D   02....       LJMP    ??sapp_controlEpProcess_4 & 0xFFFF
    183                          {
    184          //                    topoBuffer->type = 0x02;
    185                              memcpy(topoBuffer.IEEE, NLME_GetExtAddr(), 8);
   \                     ??sapp_controlEpProcess_3:
   \   000030                ; Setup parameters for call to function memcpy
   \   000030   75..08       MOV     ?V0 + 0,#0x8
   \   000033   75..00       MOV     ?V0 + 1,#0x0
   \   000036   78..         MOV     R0,#?V0 + 0
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B                ; Setup parameters for call to function NLME_GetExtAddr
   \   00003B   12....       LCALL   ??NLME_GetExtAddr?relay
   \   00003E   EA           MOV     A,R2
   \   00003F   FC           MOV     R4,A
   \   000040   EB           MOV     A,R3
   \   000041   FD           MOV     R5,A
   \   000042   7A..         MOV     R2,#(topoBuffer + 1) & 0xff
   \   000044   7B..         MOV     R3,#((topoBuffer + 1) >> 8) & 0xff
   \   000046   12....       LCALL   ??memcpy?relay
   \   000049   7402         MOV     A,#0x2
   \   00004B   12....       LCALL   ?DEALLOC_XSTACK8
    186          #if !defined(ZDO_COORDINATOR)
    187                              topoBuffer.PAddr = NLME_GetCoordShortAddr();
    188          #else
    189                              topoBuffer.PAddr = 0xFFFF;
   \   00004E   90....       MOV     DPTR,#topoBuffer + 9
   \   000051   74FF         MOV     A,#-0x1
   \   000053   F0           MOVX    @DPTR,A
   \   000054   A3           INC     DPTR
   \   000055   F0           MOVX    @DPTR,A
    190          #endif
    191                              osal_memcpy(&topoBuffer.panid, &_NIB.nwkPanId, sizeof(uint16));
   \   000056                ; Setup parameters for call to function osal_memcpy
   \   000056   75....       MOV     ?V0 + 8,#(_NIB + 33) & 0xff
   \   000059   75....       MOV     ?V0 + 9,#((_NIB + 33) >> 8) & 0xff
   \   00005C   75..00       MOV     ?V0 + 10,#0x0
   \   00005F   78..         MOV     R0,#?V0 + 8
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000064   7C02         MOV     R4,#0x2
   \   000066   7D00         MOV     R5,#0x0
   \   000068   7A..         MOV     R2,#(topoBuffer + 11) & 0xff
   \   00006A   7B..         MOV     R3,#((topoBuffer + 11) >> 8) & 0xff
   \   00006C   12....       LCALL   ??osal_memcpy?relay
   \   00006F   7403         MOV     A,#0x3
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
    192                              osal_memcpy(&topoBuffer.channel, &_NIB.nwkLogicalChannel, sizeof(uint8));
   \   000074                ; Setup parameters for call to function osal_memcpy
   \   000074   75....       MOV     ?V0 + 8,#(_NIB + 22) & 0xff
   \   000077   75....       MOV     ?V0 + 9,#((_NIB + 22) >> 8) & 0xff
   \   00007A   78..         MOV     R0,#?V0 + 8
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00007F   7C01         MOV     R4,#0x1
   \   000081   7D00         MOV     R5,#0x0
   \   000083   7A..         MOV     R2,#(topoBuffer + 13) & 0xff
   \   000085   7B..         MOV     R3,#((topoBuffer + 13) >> 8) & 0xff
   \   000087   12....       LCALL   ??osal_memcpy?relay
   \   00008A   7403         MOV     A,#0x3
   \   00008C   12....       LCALL   ?DEALLOC_XSTACK8
    193                              //向协调器发送拓扑信息
    194                              SendData(CONTROL_ENDPOINT, (unsigned char *)&topoBuffer, 0x0000, TRANSFER_ENDPOINT, sizeof(TOPOINFO));
   \   00008F                ; Setup parameters for call to function SendData
   \   00008F   75..0E       MOV     ?V0 + 0,#0xe
   \   000092   78..         MOV     R0,#?V0 + 0
   \   000094   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000097   75..01       MOV     ?V0 + 0,#0x1
   \   00009A   78..         MOV     R0,#?V0 + 0
   \   00009C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009F   7C00         MOV     R4,#0x0
   \   0000A1   7D00         MOV     R5,#0x0
   \   0000A3   7A..         MOV     R2,#topoBuffer & 0xff
   \   0000A5   7B..         MOV     R3,#(topoBuffer >> 8) & 0xff
   \   0000A7   79F0         MOV     R1,#-0x10
   \   0000A9   12....       LCALL   ??SendData?relay
   \   0000AC   7402         MOV     A,#0x2
   \   0000AE   12....       LCALL   ?DEALLOC_XSTACK8
    195                              HalLedBlink( HAL_LED_2, 4, 50, 250 );
   \   0000B1                ; Setup parameters for call to function HalLedBlink
   \   0000B1   7CFA         MOV     R4,#-0x6
   \   0000B3   7D00         MOV     R5,#0x0
   \   0000B5   7B32         MOV     R3,#0x32
   \   0000B7   7A04         MOV     R2,#0x4
   \                     ??sapp_controlEpProcess_5:
   \   0000B9   7902         MOV     R1,#0x2
   \                     ??sapp_controlEpProcess_6:
   \   0000BB   12....       LCALL   ??HalLedBlink?relay
    196                          }
    197                      }
    198                      break;
    199                      default:
    200                          break;
    201                      }
    202                      // Release the memory
    203                      osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??sapp_controlEpProcess_4:
   \   0000BE                ; Setup parameters for call to function osal_msg_deallocate
   \   0000BE   EE           MOV     A,R6
   \   0000BF   FA           MOV     R2,A
   \   0000C0   EF           MOV     A,R7
   \   0000C1   FB           MOV     R3,A
   \   0000C2   12....       LCALL   ??osal_msg_deallocate?relay
    204                      // Next - if one is available
    205                      MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
   \   0000C5                ; Setup parameters for call to function osal_msg_receive
   \   0000C5   A9..         MOV     R1,?V0 + 4
   \                     ??sapp_controlEpProcess_1:
   \   0000C7   12....       LCALL   ??osal_msg_receive?relay
   \   0000CA   8A..         MOV     ?V0 + 0,R2
   \   0000CC   8B..         MOV     ?V0 + 1,R3
   \   0000CE   AE..         MOV     R6,?V0 + 0
   \   0000D0   AF..         MOV     R7,?V0 + 1
   \   0000D2   EE           MOV     A,R6
   \   0000D3   4F           ORL     A,R7
   \   0000D4   7003         JNZ     $+5
   \   0000D6   02....       LJMP    ??sapp_controlEpProcess_7 & 0xFFFF
   \   0000D9   8E82         MOV     DPL,R6
   \   0000DB   8F83         MOV     DPH,R7
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   14           DEC     A
   \   0000DF   6010         JZ      ??sapp_controlEpProcess_8
   \   0000E1   24E7         ADD     A,#-0x19
   \   0000E3   7003         JNZ     $+5
   \   0000E5   02....       LJMP    ??sapp_controlEpProcess_9 & 0xFFFF
   \   0000E8   2449         ADD     A,#0x49
   \   0000EA   7003         JNZ     $+5
   \   0000EC   02....       LJMP    ??sapp_controlEpProcess_2 & 0xFFFF
   \   0000EF   80CD         SJMP    ??sapp_controlEpProcess_4
   \                     ??sapp_controlEpProcess_8:
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   F8           MOV     R0,A
   \   0000F5   A3           INC     DPTR
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   F9           MOV     R1,A
   \   0000F8   E8           MOV     A,R0
   \   0000F9   FA           MOV     R2,A
   \   0000FA   E9           MOV     A,R1
   \   0000FB   FB           MOV     R3,A
   \   0000FC   90....       MOV     DPTR,#curNwkState
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   6409         XRL     A,#0x9
   \   000102   600A         JZ      ??sapp_controlEpProcess_10
   \   000104   E0           MOVX    A,@DPTR
   \   000105   6407         XRL     A,#0x7
   \   000107   6005         JZ      ??sapp_controlEpProcess_10
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   6406         XRL     A,#0x6
   \   00010C   7059         JNZ     ??sapp_controlEpProcess_11
   \                     ??sapp_controlEpProcess_10:
   \   00010E   8A82         MOV     DPL,R2
   \   000110   8B83         MOV     DPH,R3
   \   000112   A3           INC     DPTR
   \   000113   A3           INC     DPTR
   \   000114   A3           INC     DPTR
   \   000115   E0           MOVX    A,@DPTR
   \   000116   6418         XRL     A,#0x18
   \   000118   7002         JNZ     ??sapp_controlEpProcess_12
   \   00011A   A3           INC     DPTR
   \   00011B   E0           MOVX    A,@DPTR
   \                     ??sapp_controlEpProcess_12:
   \   00011C   7049         JNZ     ??sapp_controlEpProcess_11
   \   00011E   8A82         MOV     DPL,R2
   \   000120   8B83         MOV     DPH,R3
   \   000122   A3           INC     DPTR
   \   000123   A3           INC     DPTR
   \   000124   A3           INC     DPTR
   \   000125   A3           INC     DPTR
   \   000126   A3           INC     DPTR
   \   000127   E0           MOVX    A,@DPTR
   \   000128   64F1         XRL     A,#0xf1
   \   00012A   703B         JNZ     ??sapp_controlEpProcess_11
   \   00012C                ; Setup parameters for call to function SendData
   \   00012C   8A82         MOV     DPL,R2
   \   00012E   8B83         MOV     DPH,R3
   \   000130   A3           INC     DPTR
   \   000131   A3           INC     DPTR
   \   000132   E0           MOVX    A,@DPTR
   \   000133   24FA         ADD     A,#-0x6
   \   000135   F5..         MOV     ?V0 + 0,A
   \   000137   78..         MOV     R0,#?V0 + 0
   \   000139   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00013C   8A82         MOV     DPL,R2
   \   00013E   8B83         MOV     DPH,R3
   \   000140   A3           INC     DPTR
   \   000141   A3           INC     DPTR
   \   000142   A3           INC     DPTR
   \   000143   A3           INC     DPTR
   \   000144   A3           INC     DPTR
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00014B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00014E   8A82         MOV     DPL,R2
   \   000150   8B83         MOV     DPH,R3
   \   000152   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000155   EA           MOV     A,R2
   \   000156   2409         ADD     A,#0x9
   \   000158   FA           MOV     R2,A
   \   000159   EB           MOV     A,R3
   \   00015A   3400         ADDC    A,#0x0
   \   00015C   FB           MOV     R3,A
   \   00015D   7901         MOV     R1,#0x1
   \   00015F   12....       LCALL   ??SendData?relay
   \   000162   7402         MOV     A,#0x2
   \   000164   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??sapp_controlEpProcess_11:
   \   000167                ; Setup parameters for call to function HalLedBlink
   \   000167   7C5A         MOV     R4,#0x5a
   \   000169   7D00         MOV     R5,#0x0
   \   00016B   7B32         MOV     R3,#0x32
   \   00016D   7A02         MOV     R2,#0x2
   \   00016F   7901         MOV     R1,#0x1
   \   000171   02....       LJMP    ??sapp_controlEpProcess_6 & 0xFFFF
   \                     ??sapp_controlEpProcess_9:
   \   000174   A3           INC     DPTR
   \   000175   A3           INC     DPTR
   \   000176   A3           INC     DPTR
   \   000177   A3           INC     DPTR
   \   000178   E0           MOVX    A,@DPTR
   \   000179   6401         XRL     A,#0x1
   \   00017B   7002         JNZ     ??sapp_controlEpProcess_13
   \   00017D   A3           INC     DPTR
   \   00017E   E0           MOVX    A,@DPTR
   \                     ??sapp_controlEpProcess_13:
   \   00017F   6003         JZ      $+5
   \   000181   02....       LJMP    ??sapp_controlEpProcess_4 & 0xFFFF
   \   000184   EE           MOV     A,R6
   \   000185   2422         ADD     A,#0x22
   \   000187   F582         MOV     DPL,A
   \   000189   EF           MOV     A,R7
   \   00018A   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00018D   F8           MOV     R0,A
   \   00018E   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000191   E0           MOVX    A,@DPTR
   \   000192   14           DEC     A
   \   000193   6009         JZ      ??sapp_controlEpProcess_14
   \   000195   14           DEC     A
   \   000196   6035         JZ      ??sapp_controlEpProcess_15
   \   000198   14           DEC     A
   \   000199   6049         JZ      ??sapp_controlEpProcess_16
   \   00019B   02....       LJMP    ??sapp_controlEpProcess_17 & 0xFFFF
   \                     ??sapp_controlEpProcess_14:
   \   00019E                ; Setup parameters for call to function SendData
   \   00019E   75F003       MOV     B,#0x3
   \   0001A1   90....       MOV     DPTR,#funcCount
   \   0001A4   E0           MOVX    A,@DPTR
   \   0001A5   A4           MUL     AB
   \   0001A6   2402         ADD     A,#0x2
   \   0001A8   F5..         MOV     ?V0 + 0,A
   \   0001AA   78..         MOV     R0,#?V0 + 0
   \   0001AC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001AF   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0001B2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001B5   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   0001B8   90....       MOV     DPTR,#funcTableBuffer
   \   0001BB   E0           MOVX    A,@DPTR
   \   0001BC   FA           MOV     R2,A
   \   0001BD   A3           INC     DPTR
   \   0001BE   E0           MOVX    A,@DPTR
   \   0001BF   FB           MOV     R3,A
   \                     ??sapp_controlEpProcess_18:
   \   0001C0   79F0         MOV     R1,#-0x10
   \   0001C2   12....       LCALL   ??SendData?relay
   \   0001C5   7402         MOV     A,#0x2
   \   0001C7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001CA   02....       LJMP    ??sapp_controlEpProcess_19 & 0xFFFF
   \                     ??sapp_controlEpProcess_15:
   \   0001CD                ; Setup parameters for call to function SendData
   \   0001CD   75..0E       MOV     ?V0 + 0,#0xe
   \   0001D0   78..         MOV     R0,#?V0 + 0
   \   0001D2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001D5   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0001D8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001DB   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   0001DE   7A..         MOV     R2,#topoBuffer & 0xff
   \   0001E0   7B..         MOV     R3,#(topoBuffer >> 8) & 0xff
   \   0001E2   80DC         SJMP    ??sapp_controlEpProcess_18
   \                     ??sapp_controlEpProcess_16:
   \   0001E4   7B00         MOV     R3,#0x0
   \   0001E6   8001         SJMP    ??sapp_controlEpProcess_20
   \                     ??sapp_controlEpProcess_21:
   \   0001E8   0B           INC     R3
   \                     ??sapp_controlEpProcess_20:
   \   0001E9   90....       MOV     DPTR,#funcTableBuffer
   \   0001EC   E0           MOVX    A,@DPTR
   \   0001ED   F8           MOV     R0,A
   \   0001EE   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   0001F1   A3           INC     DPTR
   \   0001F2   E0           MOVX    A,@DPTR
   \   0001F3   F8           MOV     R0,A
   \   0001F4   EB           MOV     A,R3
   \   0001F5   C3           CLR     C
   \   0001F6   98           SUBB    A,R0
   \   0001F7   4003         JC      $+5
   \   0001F9   02....       LJMP    ??sapp_controlEpProcess_19 & 0xFFFF
   \   0001FC   EB           MOV     A,R3
   \   0001FD   75F003       MOV     B,#0x3
   \   000200   A4           MUL     AB
   \   000201   F8           MOV     R0,A
   \   000202   A9F0         MOV     R1,B
   \   000204   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000207   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00020A   E0           MOVX    A,@DPTR
   \   00020B   68           XRL     A,R0
   \   00020C   70DA         JNZ     ??sapp_controlEpProcess_21
   \   00020E   EB           MOV     A,R3
   \   00020F   75F003       MOV     B,#0x3
   \   000212   A4           MUL     AB
   \   000213   F8           MOV     R0,A
   \   000214   A9F0         MOV     R1,B
   \   000216   90....       MOV     DPTR,#funcTableBuffer
   \   000219   E0           MOVX    A,@DPTR
   \   00021A   28           ADD     A,R0
   \   00021B   A3           INC     DPTR
   \   00021C   E0           MOVX    A,@DPTR
   \   00021D   39           ADDC    A,R1
   \   00021E   8A82         MOV     DPL,R2
   \   000220   F583         MOV     DPH,A
   \   000222   A3           INC     DPTR
   \   000223   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000226   A3           INC     DPTR
   \   000227   E0           MOVX    A,@DPTR
   \   000228   68           XRL     A,R0
   \   000229   70BD         JNZ     ??sapp_controlEpProcess_21
   \   00022B   85..82       MOV     DPL,?XSP + 0
   \   00022E   85..83       MOV     DPH,?XSP + 1
   \   000231   AC82         MOV     R4,DPL
   \   000233   AD83         MOV     R5,DPH
   \   000235   7583..       MOV     DPH,#(`?<Constant {3, 0, 0}>` >> 8) & 0xff
   \   000238   7582..       MOV     DPL,#`?<Constant {3, 0, 0}>` & 0xff
   \   00023B   7403         MOV     A,#0x3
   \   00023D   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   000240   04           INC     A
   \   000241   2B           ADD     A,R3
   \   000242   C0E0         PUSH    A
   \   000244   7401         MOV     A,#0x1
   \   000246   12....       LCALL   ?XSTACK_DISP0_8
   \   000249   D0E0         POP     A
   \   00024B   F0           MOVX    @DPTR,A
   \   00024C   EB           MOV     A,R3
   \   00024D   75F003       MOV     B,#0x3
   \   000250   A4           MUL     AB
   \   000251   F8           MOV     R0,A
   \   000252   A9F0         MOV     R1,B
   \   000254   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000257   E0           MOVX    A,@DPTR
   \   000258   C0E0         PUSH    A
   \   00025A   7402         MOV     A,#0x2
   \   00025C   12....       LCALL   ?XSTACK_DISP0_8
   \   00025F   D0E0         POP     A
   \   000261   F0           MOVX    @DPTR,A
   \   000262                ; Setup parameters for call to function SendData
   \   000262   75..03       MOV     ?V0 + 0,#0x3
   \   000265   78..         MOV     R0,#?V0 + 0
   \   000267   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00026A   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00026D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000270   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000273   7402         MOV     A,#0x2
   \   000275   12....       LCALL   ?XSTACK_DISP0_8
   \   000278   AA82         MOV     R2,DPL
   \   00027A   AB83         MOV     R3,DPH
   \   00027C   02....       LJMP    ??sapp_controlEpProcess_18 & 0xFFFF
   \                     ??sapp_controlEpProcess_17:
   \   00027F   75..00       MOV     ?V0 + 0,#0x0
   \   000282   75..00       MOV     ?V0 + 1,#0x0
   \   000285   802E         SJMP    ??sapp_controlEpProcess_22
   \                     ??sapp_controlEpProcess_23:
   \   000287   E5..         MOV     A,?V0 + 0
   \   000289   75F021       MOV     B,#0x21
   \   00028C   A4           MUL     AB
   \   00028D   F8           MOV     R0,A
   \   00028E   AAF0         MOV     R2,B
   \   000290   75F021       MOV     B,#0x21
   \   000293   E5..         MOV     A,?V0 + 1
   \   000295   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000298   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00029B   600C         JZ      ??sapp_controlEpProcess_24
   \   00029D                ; Setup parameters for indirect call
   \   00029D   EE           MOV     A,R6
   \   00029E   FC           MOV     R4,A
   \   00029F   EF           MOV     A,R7
   \   0002A0   FD           MOV     R5,A
   \   0002A1   7904         MOV     R1,#0x4
   \   0002A3   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0002A6   12....       LCALL   ?CALL_IND
   \                     ??sapp_controlEpProcess_24:
   \   0002A9   E5..         MOV     A,?V0 + 0
   \   0002AB   2401         ADD     A,#0x1
   \   0002AD   F5..         MOV     ?V0 + 0,A
   \   0002AF   E5..         MOV     A,?V0 + 1
   \   0002B1   3400         ADDC    A,#0x0
   \   0002B3   F5..         MOV     ?V0 + 1,A
   \                     ??sapp_controlEpProcess_22:
   \   0002B5   90....       MOV     DPTR,#funcCount
   \   0002B8   E0           MOVX    A,@DPTR
   \   0002B9   F8           MOV     R0,A
   \   0002BA   C3           CLR     C
   \   0002BB   E5..         MOV     A,?V0 + 0
   \   0002BD   98           SUBB    A,R0
   \   0002BE   E5..         MOV     A,?V0 + 1
   \   0002C0   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0002C3   40C2         JC      ??sapp_controlEpProcess_23
   \                     ??sapp_controlEpProcess_19:
   \   0002C5                ; Setup parameters for call to function HalLedBlink
   \   0002C5   7CFA         MOV     R4,#-0x6
   \   0002C7   7D00         MOV     R5,#0x0
   \   0002C9   7B32         MOV     R3,#0x32
   \   0002CB   7A01         MOV     R2,#0x1
   \   0002CD   02....       LJMP    ??sapp_controlEpProcess_5 & 0xFFFF
    206                  }
    207                  // return unprocessed events
    208                  return (events ^ SYS_EVENT_MSG);
   \                     ??sapp_controlEpProcess_7:
   \   0002D0   AA..         MOV     R2,?V0 + 2
   \   0002D2   E5..         MOV     A,?V0 + 3
   \   0002D4   6480         XRL     A,#0x80
   \   0002D6   FB           MOV     R3,A
   \   0002D7   02....       LJMP    ??sapp_controlEpProcess_25 & 0xFFFF
    209              }
    210              // 定时器时间到, 遍历所有端点看是否有userTimer
    211              if(events & SAPP_SEND_PERIODIC_MSG_EVT)
   \                     ??sapp_controlEpProcess_0:
   \   0002DA   EA           MOV     A,R2
   \   0002DB   A2E0         MOV     C,0xE0 /* A   */.0
   \   0002DD   4003         JC      $+5
   \   0002DF   02....       LJMP    ??sapp_controlEpProcess_26 & 0xFFFF
    212              {
    213                  int i;
    214                  uint8 hasUserTimer = 0;
   \   0002E2   75..00       MOV     ?V0 + 0,#0x0
    215                  for(i = 0; i < funcCount; i++)
   \   0002E5   7E00         MOV     R6,#0x0
   \   0002E7   7F00         MOV     R7,#0x0
   \   0002E9   8047         SJMP    ??CrossCallReturnLabel_26
    216                  {
    217                      struct ep_info_t *ep = &funcList[i];
   \                     ??sapp_controlEpProcess_27:
   \   0002EB   EE           MOV     A,R6
   \   0002EC   F8           MOV     R0,A
   \   0002ED   EF           MOV     A,R7
   \   0002EE   F9           MOV     R1,A
   \   0002EF   E8           MOV     A,R0
   \   0002F0   75F021       MOV     B,#0x21
   \   0002F3   A4           MUL     AB
   \   0002F4   F8           MOV     R0,A
   \   0002F5   AAF0         MOV     R2,B
   \   0002F7   75F021       MOV     B,#0x21
   \   0002FA   E9           MOV     A,R1
   \   0002FB   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0002FE   39           ADDC    A,R1
   \   0002FF   FB           MOV     R3,A
    218                      if(ep->userTimer && ep->res_available)
   \   000300   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000303   602A         JZ      ??sapp_controlEpProcess_28
   \   000305   12....       LCALL   ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000308   6025         JZ      ??sapp_controlEpProcess_28
    219                      {
    220                          hasUserTimer = 1;
   \   00030A   75..01       MOV     ?V0 + 0,#0x1
    221                          ep->userTimer = ep->userTimer - 1;
   \   00030D   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000310   14           DEC     A
   \   000311   F0           MOVX    @DPTR,A
    222                          if(ep->userTimer <= 1)
   \   000312   C3           CLR     C
   \   000313   9402         SUBB    A,#0x2
   \   000315   5018         JNC     ??sapp_controlEpProcess_28
    223                          {
    224                              ep->userTimer = 0;
   \   000317   E4           CLR     A
   \   000318   F0           MOVX    @DPTR,A
    225                              (*ep->res_available)(ep, ResUserTimer, NULL);
   \   000319                ; Setup parameters for indirect call
   \   000319   FC           MOV     R4,A
   \   00031A   FD           MOV     R5,A
   \   00031B   7903         MOV     R1,#0x3
   \   00031D   8A82         MOV     DPL,R2
   \   00031F   8B83         MOV     DPH,R3
   \   000321   A3           INC     DPTR
   \   000322   A3           INC     DPTR
   \   000323   A3           INC     DPTR
   \   000324   A3           INC     DPTR
   \   000325   A3           INC     DPTR
   \   000326   A3           INC     DPTR
   \   000327   E0           MOVX    A,@DPTR
   \   000328   F8           MOV     R0,A
   \   000329   12....       LCALL   ??Subroutine37_0 & 0xFFFF
    226                          }
    227                      }
    228                  }
   \                     ??CrossCallReturnLabel_73:
   \   00032C   12....       LCALL   ?CALL_IND
   \                     ??sapp_controlEpProcess_28:
   \   00032F   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000332   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000335   40B4         JC      ??sapp_controlEpProcess_27
    229                  if(hasUserTimer)
   \   000337   E5..         MOV     A,?V0 + 0
   \   000339   A2E0         MOV     C,0xE0 /* A   */.0
   \   00033B   500F         JNC     ??sapp_controlEpProcess_29
    230                  {
    231                      // 重新启动定时器
    232                      osal_start_timerEx(task_id, SAPP_SEND_PERIODIC_MSG_EVT, 1000);
   \   00033D                ; Setup parameters for call to function osal_start_timerEx
   \   00033D   7CE8         MOV     R4,#-0x18
   \   00033F   7D03         MOV     R5,#0x3
   \   000341   7A01         MOV     R2,#0x1
   \   000343   7B00         MOV     R3,#0x0
   \   000345   A9..         MOV     R1,?V0 + 4
   \   000347   12....       LCALL   ??osal_start_timerEx?relay
   \   00034A   800D         SJMP    ??sapp_controlEpProcess_30
    233                  }
    234                  else
    235                  {
    236                      isUserTimerRunning = 0;
   \                     ??sapp_controlEpProcess_29:
   \   00034C   90....       MOV     DPTR,#isUserTimerRunning
   \   00034F   E4           CLR     A
   \   000350   F0           MOVX    @DPTR,A
    237                      osal_stop_timerEx(task_id, SAPP_SEND_PERIODIC_MSG_EVT);
   \   000351                ; Setup parameters for call to function osal_stop_timerEx
   \   000351   7A01         MOV     R2,#0x1
   \   000353   FB           MOV     R3,A
   \   000354   A9..         MOV     R1,?V0 + 4
   \   000356   12....       LCALL   ??osal_stop_timerEx?relay
    238                  }
    239                  // return unprocessed events
    240                  return (events ^ SAPP_SEND_PERIODIC_MSG_EVT);
   \                     ??sapp_controlEpProcess_30:
   \   000359   E5..         MOV     A,?V0 + 2
   \   00035B   6401         XRL     A,#0x1
   \   00035D   FA           MOV     R2,A
   \   00035E   AB..         MOV     R3,?V0 + 3
   \   000360   8004         SJMP    ??sapp_controlEpProcess_25
    241              }
    242              // Discard unknown events
    243              return 0;
   \                     ??sapp_controlEpProcess_26:
   \   000362   7A00         MOV     R2,#0x0
   \   000364   7B00         MOV     R3,#0x0
   \                     ??sapp_controlEpProcess_25:
   \   000366   7403         MOV     A,#0x3
   \   000368   12....       LCALL   ?DEALLOC_XSTACK8
   \   00036B   7F0B         MOV     R7,#0xb
   \   00036D   02....       LJMP    ?BANKED_LEAVE_XDATA
    244          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   A4           MUL     AB
   \   000001   2A           ADD     A,R2
   \   000002   F9           MOV     R1,A
   \   000003   74..         MOV     A,#funcList & 0xff
   \   000005   28           ADD     A,R0
   \   000006   FA           MOV     R2,A
   \   000007   74..         MOV     A,#(funcList >> 8) & 0xff
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   EE           MOV     A,R6
   \   000001   240F         ADD     A,#0xf
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000009                REQUIRE ??Subroutine36_0
   \   000009                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F8           MOV     R0,A
   \   000004   EE           MOV     A,R6
   \   000005   2422         ADD     A,#0x22
   \   000007   F582         MOV     DPL,A
   \   000009   EF           MOV     A,R7
   \   00000A   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F583         MOV     DPH,A
   \   000013   8982         MOV     DPL,R1
   \   000015   A3           INC     DPTR
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   EA           MOV     A,R2
   \   000001   240E         ADD     A,#0xe
   \   000003                REQUIRE ??Subroutine38_0
   \   000003                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   F582         MOV     DPL,A
   \   000002   EB           MOV     A,R3
   \   000003                REQUIRE ??Subroutine39_0
   \   000003                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine42_0
   \   000004                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine43_0
   \   000002                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine44_0
   \   000001                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FC           MOV     R4,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FD           MOV     R5,A
   \   000008   22           RET
    245          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    246          uint16 sapp_functionEpProcess(uint8 task_id, uint16 events)
   \                     sapp_functionEpProcess:
    247          {
   \   000000   74EF         MOV     A,#-0x11
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 8,R1
   \   000007   8A..         MOV     ?V0 + 0,R2
   \   000009   8B..         MOV     ?V0 + 1,R3
    248              afIncomingMSGPacket_t *MSGpkt;
    249              if(events & SYS_EVENT_MSG)
   \   00000B   EB           MOV     A,R3
   \   00000C   5480         ANL     A,#0x80
   \   00000E   7003         JNZ     $+5
   \   000010   02....       LJMP    ??sapp_functionEpProcess_0 & 0xFFFF
    250              {
    251                  MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
   \   000013                ; Setup parameters for call to function osal_msg_receive
   \   000013   802D         SJMP    ??sapp_functionEpProcess_1
    252                  while ( MSGpkt )
    253                  {
    254                      switch ( MSGpkt->hdr.event )
    255                      {
    256                      // 接收到数据包
    257                      case AF_INCOMING_MSG_CMD:
    258                          {
    259                              switch ( MSGpkt->clusterId )
    260                              {
    261                              case SAPP_PERIODIC_CLUSTERID:
    262                                  if(MSGpkt->endPoint <= funcCount)
    263                                  {
    264                                      struct ep_info_t *ep = &funcList[MSGpkt->endPoint - 1];
    265                                      if(ep->incoming_data)
    266                                          (*ep->incoming_data)(ep, MSGpkt->srcAddr.addr.shortAddr, MSGpkt->srcAddr.endPoint, &MSGpkt->cmd);
    267                                  }
    268                                  HalLedBlink( HAL_LED_2, 1, 50, 250 );
    269                                  break;
    270                              }
    271                          }
    272                          break;
    273          
    274                      case ZDO_STATE_CHANGE:
    275                          {
    276                              curNwkState = (devStates_t)(MSGpkt->hdr.status);
    277                              if ( (curNwkState == DEV_ZB_COORD)
    278                                      || (curNwkState == DEV_ROUTER)
    279                                      || (curNwkState == DEV_END_DEVICE) )
    280                              {
    281                                  int i;
    282                                  int hasTimeOut = 0;
    283                                  for(i = 0; i < funcCount; i++)
    284                                  {
    285                                      struct ep_info_t *ep = &funcList[i];
    286                                      if(ep->nwk_stat_change)
    287                                          (*ep->nwk_stat_change)(ep);
    288                                      // 重置端点计数器
    289                                      if(ep->time_out && ep->function.cycle)
    290                                      {
    291                                          ep->timerTick = ep->function.cycle;
    292                                          hasTimeOut = 1;
    293                                      }
    294                                  }
    295                                  if(hasTimeOut)
    296                                  {
    297                                      // 加入网络成功,启动定时器,为各个端点提供定时
    298                                      osal_start_timerEx(task_id,
    299                                                         SAPP_SEND_PERIODIC_MSG_EVT,
    300                                                         1000);
    301                                  }
    302                              }
    303                              else
    304                                  osal_stop_timerEx(task_id, SAPP_SEND_PERIODIC_MSG_EVT);
    305                          }
    306                          break;
    307                      case IOPORT_INT_EVENT:
    308                        {
    309                          OSALIOIntData_t* IOIntData;
    310                          IOIntData =(OSALIOIntData_t*)MSGpkt;
    311                          if(IOIntData->endPoint <= funcCount)
   \                     ??sapp_functionEpProcess_2:
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00001A   401D         JC      ??sapp_functionEpProcess_3
    312                          {
    313                              struct ep_info_t *ep = &funcList[IOIntData->endPoint - 1];
   \   00001C   8E82         MOV     DPL,R6
   \   00001E   8F83         MOV     DPH,R7
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000025   12....       LCALL   ?Subroutine2 & 0xFFFF
    314                              if(ep->res_available)
   \                     ??CrossCallReturnLabel_44:
   \   000028   600F         JZ      ??sapp_functionEpProcess_3
    315                                  (*ep->res_available)(ep, ResIOInt, IOIntData->arg);
   \   00002A                ; Setup parameters for indirect call
   \   00002A   8E82         MOV     DPL,R6
   \   00002C   8F83         MOV     DPH,R7
   \   00002E   12....       LCALL   ??Subroutine44_0 & 0xFFFF
    316                          }
    317                        }
   \                     ??CrossCallReturnLabel_97:
   \   000031   7905         MOV     R1,#0x5
   \   000033   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000036   12....       LCALL   ?CALL_IND
    318                        break;
    319          #if defined(HAL_IRDEC) && (HAL_IRDEC == TRUE)
    320                      case IRDEC_INT_EVENT:   //
    321                        {
    322                          OSALIRDecIntData_t* TimerIntData = (OSALIRDecIntData_t*)MSGpkt;
    323                          if(TimerIntData->endPoint <= funcCount)
    324                          {
    325                              struct ep_info_t *ep = &funcList[TimerIntData->endPoint - 1];
    326                              if(ep->res_available)
    327                                  (*ep->res_available)(ep, ResTimerInt, TimerIntData->data);
    328                          }
    329                        }
    330                        break;
    331          #endif
    332                      default:
    333                          break;
    334                      }
    335                      // Release the memory
    336                      osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??sapp_functionEpProcess_3:
   \   000039                ; Setup parameters for call to function osal_msg_deallocate
   \   000039   EE           MOV     A,R6
   \   00003A   FA           MOV     R2,A
   \   00003B   EF           MOV     A,R7
   \   00003C   FB           MOV     R3,A
   \   00003D   12....       LCALL   ??osal_msg_deallocate?relay
    337                      // Next - if one is available
    338                      MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
   \   000040                ; Setup parameters for call to function osal_msg_receive
   \   000040   A9..         MOV     R1,?V0 + 8
   \                     ??sapp_functionEpProcess_1:
   \   000042   12....       LCALL   ??osal_msg_receive?relay
   \   000045   8A..         MOV     ?V0 + 2,R2
   \   000047   8B..         MOV     ?V0 + 3,R3
   \   000049   AE..         MOV     R6,?V0 + 2
   \   00004B   AF..         MOV     R7,?V0 + 3
   \   00004D   EE           MOV     A,R6
   \   00004E   4F           ORL     A,R7
   \   00004F   7003         JNZ     $+5
   \   000051   02....       LJMP    ??sapp_functionEpProcess_4 & 0xFFFF
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   E0           MOVX    A,@DPTR
   \   000059   24E6         ADD     A,#-0x1a
   \   00005B   600A         JZ      ??sapp_functionEpProcess_5
   \   00005D   2449         ADD     A,#0x49
   \   00005F   6077         JZ      ??sapp_functionEpProcess_6
   \   000061   24E1         ADD     A,#-0x1f
   \   000063   60B0         JZ      ??sapp_functionEpProcess_2
   \   000065   80D2         SJMP    ??sapp_functionEpProcess_3
   \                     ??sapp_functionEpProcess_5:
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   6401         XRL     A,#0x1
   \   00006E   7002         JNZ     ??sapp_functionEpProcess_7
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \                     ??sapp_functionEpProcess_7:
   \   000072   70C5         JNZ     ??sapp_functionEpProcess_3
   \   000074   EE           MOV     A,R6
   \   000075   2414         ADD     A,#0x14
   \   000077   F582         MOV     DPL,A
   \   000079   EF           MOV     A,R7
   \   00007A   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00007D   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000080   4046         JC      ??sapp_functionEpProcess_8
   \   000082   EE           MOV     A,R6
   \   000083   2414         ADD     A,#0x14
   \   000085   F582         MOV     DPL,A
   \   000087   EF           MOV     A,R7
   \   000088   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00008B   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00008E   39           ADDC    A,R1
   \   00008F   FB           MOV     R3,A
   \   000090   8A82         MOV     DPL,R2
   \   000092   8B83         MOV     DPH,R3
   \   000094   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000097   602F         JZ      ??sapp_functionEpProcess_8
   \   000099                ; Setup parameters for indirect call
   \   000099   EE           MOV     A,R6
   \   00009A   241F         ADD     A,#0x1f
   \   00009C   F5..         MOV     ?V0 + 2,A
   \   00009E   EF           MOV     A,R7
   \   00009F   3400         ADDC    A,#0x0
   \   0000A1   F5..         MOV     ?V0 + 3,A
   \   0000A3   78..         MOV     R0,#?V0 + 2
   \   0000A5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A8   EE           MOV     A,R6
   \   0000A9   240F         ADD     A,#0xf
   \   0000AB   F582         MOV     DPL,A
   \   0000AD   EF           MOV     A,R7
   \   0000AE   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0000B1   F9           MOV     R1,A
   \   0000B2   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   0000B5   8A82         MOV     DPL,R2
   \   0000B7   8B83         MOV     DPH,R3
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   F8           MOV     R0,A
   \   0000BD   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0000C0   12....       LCALL   ?CALL_IND
   \   0000C3   7402         MOV     A,#0x2
   \   0000C5   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??sapp_functionEpProcess_8:
   \   0000C8                ; Setup parameters for call to function HalLedBlink
   \   0000C8   7CFA         MOV     R4,#-0x6
   \   0000CA   7D00         MOV     R5,#0x0
   \   0000CC   7B32         MOV     R3,#0x32
   \   0000CE   7A01         MOV     R2,#0x1
   \   0000D0   7902         MOV     R1,#0x2
   \   0000D2   12....       LCALL   ??HalLedBlink?relay
   \   0000D5   02....       LJMP    ??sapp_functionEpProcess_3 & 0xFFFF
   \                     ??sapp_functionEpProcess_6:
   \   0000D8   A3           INC     DPTR
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   90....       MOV     DPTR,#curNwkState
   \   0000DD   F0           MOVX    @DPTR,A
   \   0000DE   6409         XRL     A,#0x9
   \   0000E0   600D         JZ      ??sapp_functionEpProcess_9
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   6407         XRL     A,#0x7
   \   0000E5   6008         JZ      ??sapp_functionEpProcess_9
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   6406         XRL     A,#0x6
   \   0000EA   6003         JZ      $+5
   \   0000EC   02....       LJMP    ??sapp_functionEpProcess_10 & 0xFFFF
   \                     ??sapp_functionEpProcess_9:
   \   0000EF   75..00       MOV     ?V0 + 4,#0x0
   \   0000F2   75..00       MOV     ?V0 + 2,#0x0
   \   0000F5   75..00       MOV     ?V0 + 3,#0x0
   \   0000F8   806D         SJMP    ??sapp_functionEpProcess_11
   \                     ??sapp_functionEpProcess_12:
   \   0000FA   E5..         MOV     A,?V0 + 2
   \   0000FC   75F021       MOV     B,#0x21
   \   0000FF   A4           MUL     AB
   \   000100   F8           MOV     R0,A
   \   000101   AAF0         MOV     R2,B
   \   000103   75F021       MOV     B,#0x21
   \   000106   E5..         MOV     A,?V0 + 3
   \   000108   12....       LCALL   ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00010B   F5..         MOV     ?V0 + 6,A
   \   00010D   74..         MOV     A,#(funcList >> 8) & 0xff
   \   00010F   39           ADDC    A,R1
   \   000110   F5..         MOV     ?V0 + 7,A
   \   000112   85..82       MOV     DPL,?V0 + 6
   \   000115   F583         MOV     DPH,A
   \   000117   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00011A   600E         JZ      ??sapp_functionEpProcess_13
   \   00011C                ; Setup parameters for indirect call
   \   00011C   AA..         MOV     R2,?V0 + 6
   \   00011E   AB..         MOV     R3,?V0 + 7
   \   000120   8A82         MOV     DPL,R2
   \   000122   8B83         MOV     DPH,R3
   \   000124   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000127   12....       LCALL   ?CALL_IND
   \                     ??sapp_functionEpProcess_13:
   \   00012A   85..82       MOV     DPL,?V0 + 6
   \   00012D   85..83       MOV     DPH,?V0 + 7
   \   000130   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000133   6026         JZ      ??sapp_functionEpProcess_14
   \   000135   85..82       MOV     DPL,?V0 + 6
   \   000138   85..83       MOV     DPH,?V0 + 7
   \   00013B   A3           INC     DPTR
   \   00013C   A3           INC     DPTR
   \   00013D   A3           INC     DPTR
   \   00013E   A3           INC     DPTR
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   A3           INC     DPTR
   \   000142   A3           INC     DPTR
   \   000143   A3           INC     DPTR
   \   000144   A3           INC     DPTR
   \   000145   E0           MOVX    A,@DPTR
   \   000146   6013         JZ      ??sapp_functionEpProcess_14
   \   000148   C0E0         PUSH    A
   \   00014A   E5..         MOV     A,?V0 + 6
   \   00014C   240D         ADD     A,#0xd
   \   00014E   F582         MOV     DPL,A
   \   000150   E5..         MOV     A,?V0 + 7
   \   000152   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000155   D0E0         POP     A
   \   000157   F0           MOVX    @DPTR,A
   \   000158   75..01       MOV     ?V0 + 4,#0x1
   \                     ??sapp_functionEpProcess_14:
   \   00015B   E5..         MOV     A,?V0 + 2
   \   00015D   2401         ADD     A,#0x1
   \   00015F   F5..         MOV     ?V0 + 2,A
   \   000161   E5..         MOV     A,?V0 + 3
   \   000163   3400         ADDC    A,#0x0
   \   000165   F5..         MOV     ?V0 + 3,A
   \                     ??sapp_functionEpProcess_11:
   \   000167   90....       MOV     DPTR,#funcCount
   \   00016A   E0           MOVX    A,@DPTR
   \   00016B   F8           MOV     R0,A
   \   00016C   C3           CLR     C
   \   00016D   E5..         MOV     A,?V0 + 2
   \   00016F   98           SUBB    A,R0
   \   000170   E5..         MOV     A,?V0 + 3
   \   000172   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000175   4083         JC      ??sapp_functionEpProcess_12
   \   000177   E5..         MOV     A,?V0 + 4
   \   000179   A2E0         MOV     C,0xE0 /* A   */.0
   \   00017B   4003         JC      $+5
   \   00017D   02....       LJMP    ??sapp_functionEpProcess_3 & 0xFFFF
   \   000180                ; Setup parameters for call to function osal_start_timerEx
   \   000180   7CE8         MOV     R4,#-0x18
   \   000182   7D03         MOV     R5,#0x3
   \   000184   7A01         MOV     R2,#0x1
   \   000186   7B00         MOV     R3,#0x0
   \   000188   A9..         MOV     R1,?V0 + 8
   \   00018A   12....       LCALL   ??osal_start_timerEx?relay
   \   00018D   02....       LJMP    ??sapp_functionEpProcess_3 & 0xFFFF
   \                     ??sapp_functionEpProcess_10:
   \   000190                ; Setup parameters for call to function osal_stop_timerEx
   \   000190   7A01         MOV     R2,#0x1
   \   000192   7B00         MOV     R3,#0x0
   \   000194   A9..         MOV     R1,?V0 + 8
   \   000196   12....       LCALL   ??osal_stop_timerEx?relay
   \   000199   02....       LJMP    ??sapp_functionEpProcess_3 & 0xFFFF
    339                  }
    340                  // return unprocessed events
    341                  return (events ^ SYS_EVENT_MSG);
   \                     ??sapp_functionEpProcess_4:
   \   00019C   AA..         MOV     R2,?V0 + 0
   \   00019E   E5..         MOV     A,?V0 + 1
   \   0001A0   6480         XRL     A,#0x80
   \   0001A2   FB           MOV     R3,A
   \   0001A3   02....       LJMP    ??sapp_functionEpProcess_15 & 0xFFFF
    342              }
    343          
    344              // 定时器时间到, 遍历所有端点看是否有需要调用time_out
    345              if(events & SAPP_SEND_PERIODIC_MSG_EVT)
   \                     ??sapp_functionEpProcess_0:
   \   0001A6   EA           MOV     A,R2
   \   0001A7   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001A9   4003         JC      $+5
   \   0001AB   02....       LJMP    ??sapp_functionEpProcess_16 & 0xFFFF
    346              {
    347                  int i;
    348                  for(i = 0; i < funcCount; i++)
   \   0001AE   7E00         MOV     R6,#0x0
   \   0001B0   7F00         MOV     R7,#0x0
   \   0001B2   806E         SJMP    ??CrossCallReturnLabel_27
    349                  {
    350                      struct ep_info_t *ep = &funcList[i];
   \                     ??sapp_functionEpProcess_17:
   \   0001B4   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0001B7   F5..         MOV     ?V0 + 2,A
   \   0001B9   74..         MOV     A,#(funcList >> 8) & 0xff
   \   0001BB   39           ADDC    A,R1
   \   0001BC   F5..         MOV     ?V0 + 3,A
    351                      if(ep->time_out && ep->function.cycle)
   \   0001BE   85..82       MOV     DPL,?V0 + 2
   \   0001C1   F583         MOV     DPH,A
   \   0001C3   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0001C6   6057         JZ      ??sapp_functionEpProcess_18
   \   0001C8   85..82       MOV     DPL,?V0 + 2
   \   0001CB   85..83       MOV     DPH,?V0 + 3
   \   0001CE   A3           INC     DPTR
   \   0001CF   A3           INC     DPTR
   \   0001D0   A3           INC     DPTR
   \   0001D1   A3           INC     DPTR
   \   0001D2   A3           INC     DPTR
   \   0001D3   A3           INC     DPTR
   \   0001D4   A3           INC     DPTR
   \   0001D5   A3           INC     DPTR
   \   0001D6   A3           INC     DPTR
   \   0001D7   A3           INC     DPTR
   \   0001D8   E0           MOVX    A,@DPTR
   \   0001D9   6044         JZ      ??sapp_functionEpProcess_18
    352                      {
    353                          // 端点需要周期执行
    354                          ep->timerTick = ep->timerTick - 1;
   \   0001DB   E5..         MOV     A,?V0 + 2
   \   0001DD   240D         ADD     A,#0xd
   \   0001DF   F582         MOV     DPL,A
   \   0001E1   E5..         MOV     A,?V0 + 3
   \   0001E3   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   0001E6   14           DEC     A
   \   0001E7   F0           MOVX    @DPTR,A
    355                          if(ep->timerTick == 0)
   \   0001E8   7035         JNZ     ??sapp_functionEpProcess_18
    356                          {
    357                            // 定时时间到,执行time_out函数
    358                            (*ep->time_out)(ep);
   \   0001EA                ; Setup parameters for indirect call
   \   0001EA   AA..         MOV     R2,?V0 + 2
   \   0001EC   AB..         MOV     R3,?V0 + 3
   \   0001EE   8A82         MOV     DPL,R2
   \   0001F0   8B83         MOV     DPH,R3
   \   0001F2   A3           INC     DPTR
   \   0001F3   A3           INC     DPTR
   \   0001F4   A3           INC     DPTR
   \   0001F5   A3           INC     DPTR
   \   0001F6   E0           MOVX    A,@DPTR
   \   0001F7   F8           MOV     R0,A
   \   0001F8   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0001FB   12....       LCALL   ?CALL_IND
    359                            ep->timerTick = ep->function.cycle;
   \   0001FE   85..82       MOV     DPL,?V0 + 2
   \   000201   85..83       MOV     DPH,?V0 + 3
   \   000204   A3           INC     DPTR
   \   000205   A3           INC     DPTR
   \   000206   A3           INC     DPTR
   \   000207   A3           INC     DPTR
   \   000208   A3           INC     DPTR
   \   000209   A3           INC     DPTR
   \   00020A   A3           INC     DPTR
   \   00020B   A3           INC     DPTR
   \   00020C   A3           INC     DPTR
   \   00020D   A3           INC     DPTR
   \   00020E   E0           MOVX    A,@DPTR
   \   00020F   C0E0         PUSH    A
   \   000211   E5..         MOV     A,?V0 + 2
   \   000213   240D         ADD     A,#0xd
   \   000215   F582         MOV     DPL,A
   \   000217   E5..         MOV     A,?V0 + 3
   \   000219   12....       LCALL   ??Subroutine35_0 & 0xFFFF
    360                          }
    361                      }
    362          #if 0
    363                      if(ep->userTimer && ep->res_available)
    364                      {
    365                          ep->userTimer = ep->userTimer - 1;
    366                          if(ep->userTimer <= 1)
    367                          {
    368                              (*ep->res_available)(ep, ResUserTimer, NULL);
    369                              ep->userTimer = 0;
    370                          }
    371                      }
    372          #endif
    373                  }
   \                     ??CrossCallReturnLabel_56:
   \   00021C   D0E0         POP     A
   \   00021E   F0           MOVX    @DPTR,A
   \                     ??sapp_functionEpProcess_18:
   \   00021F   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000222   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000225   408D         JC      ??sapp_functionEpProcess_17
    374                  // 重新启动定时器
    375                  osal_start_timerEx(task_id, SAPP_SEND_PERIODIC_MSG_EVT, 1000);
   \   000227                ; Setup parameters for call to function osal_start_timerEx
   \   000227   7CE8         MOV     R4,#-0x18
   \   000229   7D03         MOV     R5,#0x3
   \   00022B   7A01         MOV     R2,#0x1
   \   00022D   7B00         MOV     R3,#0x0
   \   00022F   A9..         MOV     R1,?V0 + 8
   \   000231   12....       LCALL   ??osal_start_timerEx?relay
    376                  // return unprocessed events
    377                  return (events ^ SAPP_SEND_PERIODIC_MSG_EVT);
   \   000234   E5..         MOV     A,?V0 + 0
   \   000236   6401         XRL     A,#0x1
   \   000238   FA           MOV     R2,A
   \   000239   AB..         MOV     R3,?V0 + 1
   \   00023B   8004         SJMP    ??sapp_functionEpProcess_15
    378              }
    379              // Discard unknown events
    380              return 0;
   \                     ??sapp_functionEpProcess_16:
   \   00023D   7A00         MOV     R2,#0x0
   \   00023F   7B00         MOV     R3,#0x0
   \                     ??sapp_functionEpProcess_15:
   \   000241   7F09         MOV     R7,#0x9
   \   000243   02....       LJMP    ?BANKED_LEAVE_XDATA
    381          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   90....       MOV     DPTR,#funcCount
   \   000005   E0           MOVX    A,@DPTR
   \   000006   C3           CLR     C
   \   000007   98           SUBB    A,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   75F021       MOV     B,#0x21
   \   000004   A4           MUL     AB
   \   000005   F8           MOV     R0,A
   \   000006   A9F0         MOV     R1,B
   \   000008   74..         MOV     A,#(funcList + 223) & 0xff
   \   00000A   28           ADD     A,R0
   \   00000B   FA           MOV     R2,A
   \   00000C   74..         MOV     A,#((funcList - 33) >> 8) & 0xff
   \   00000E   22           RET
    382          
    383          #if defined(ZDO_COORDINATOR)
    384          static uint8 uartMsgProcesser(uint8 *msg)
    385          {
    386              mtOSALSerialData_t *pMsg = (mtOSALSerialData_t *)msg;
    387              mtUserSerialMsg_t *pMsgBody = (mtUserSerialMsg_t *)pMsg->msg;
    388              if ( (curNwkState != DEV_ZB_COORD)
    389                      && (curNwkState != DEV_ROUTER)
    390                      && (curNwkState != DEV_END_DEVICE) )
    391                  return 1;
    392              switch(pMsgBody->cmd)
    393              {
    394              case 0x0018:
    395                  {
    396                      switch(pMsgBody->cmdEndPoint)
    397                      {
    398                      case 0xF1:
    399                          {
    400                              // 转发数据
    401                              SendData(TRANSFER_ENDPOINT, pMsgBody->data,
    402                                       pMsgBody->addr, pMsgBody->endPoint,
    403                                       pMsgBody->len - 6);
    404                          }
    405                          break;
    406                      }
    407                  }
    408                  break;
    409              }
    410              return 1;
    411          }
    412          #endif
    413          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    414          uint8 SendData(uint8 srcEP, const void *buf, uint16 addr, uint8 dstEP, uint8 Len)
   \                     SendData:
    415          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   8A..         MOV     ?V0 + 0,R2
   \   00000E   8B..         MOV     ?V0 + 1,R3
   \   000010   7418         MOV     A,#0x18
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F5..         MOV     ?V0 + 2,A
   \   000018   7419         MOV     A,#0x19
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   FF           MOV     R7,A
    416              static uint8 transID = 0;
    417              afAddrType_t SendDataAddr;
    418              struct ep_info_t *epInfo;
    419          
    420              if(srcEP <= funcCount)
   \   00001F   90....       MOV     DPTR,#funcCount
   \   000022   E0           MOVX    A,@DPTR
   \   000023   C3           CLR     C
   \   000024   9E           SUBB    A,R6
   \   000025   4016         JC      ??SendData_0
    421                  epInfo = &funcList[srcEP - 1];
   \   000027   EE           MOV     A,R6
   \   000028   75F021       MOV     B,#0x21
   \   00002B   A4           MUL     AB
   \   00002C   F8           MOV     R0,A
   \   00002D   A9F0         MOV     R1,B
   \   00002F   74..         MOV     A,#(funcList + 223) & 0xff
   \   000031   28           ADD     A,R0
   \   000032   F8           MOV     R0,A
   \   000033   74..         MOV     A,#((funcList - 33) >> 8) & 0xff
   \   000035   39           ADDC    A,R1
   \   000036   F9           MOV     R1,A
   \   000037   E8           MOV     A,R0
   \   000038   FA           MOV     R2,A
   \   000039   E9           MOV     A,R1
   \   00003A   FB           MOV     R3,A
   \   00003B   8004         SJMP    ??SendData_1
    422              else
    423                  epInfo = &controlEndPointInfo;
   \                     ??SendData_0:
   \   00003D   7A..         MOV     R2,#controlEndPointInfo & 0xff
   \   00003F   7B..         MOV     R3,#(controlEndPointInfo >> 8) & 0xff
    424          
    425              SendDataAddr.addrMode = (afAddrMode_t)Addr16Bit;         //短地址发送
   \                     ??SendData_1:
   \   000041   7408         MOV     A,#0x8
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   7402         MOV     A,#0x2
   \   000048   F0           MOVX    @DPTR,A
    426              SendDataAddr.endPoint = dstEP;
   \   000049   7409         MOV     A,#0x9
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   E5..         MOV     A,?V0 + 2
   \   000050   F0           MOVX    @DPTR,A
    427              SendDataAddr.addr.shortAddr = addr;
   \   000051   85..82       MOV     DPL,?XSP + 0
   \   000054   85..83       MOV     DPH,?XSP + 1
   \   000057   EC           MOV     A,R4
   \   000058   F0           MOVX    @DPTR,A
   \   000059   A3           INC     DPTR
   \   00005A   ED           MOV     A,R5
   \   00005B   F0           MOVX    @DPTR,A
    428              if ( AF_DataRequest( &SendDataAddr, //发送的地址和模式
    429                                   // TODO:
    430                                   &epInfo->SampleApp_epDesc,   //终端（比如操作系统中任务ID等）
    431                                   SAPP_PERIODIC_CLUSTERID,//发送串ID
    432                                   Len,
    433                                   (uint8*)buf,
    434                                   &transID,  //信息ID（操作系统参数）
    435                                   AF_DISCV_ROUTE,
    436                                   AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   00005C                ; Setup parameters for call to function AF_DataRequest
   \   00005C   75..1E       MOV     ?V0 + 2,#0x1e
   \   00005F   78..         MOV     R0,#?V0 + 2
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000064   75....       MOV     ?V0 + 2,#??transID & 0xff
   \   000067   75....       MOV     ?V0 + 3,#(??transID >> 8) & 0xff
   \   00006A   78..         MOV     R0,#?V0 + 2
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006F   78..         MOV     R0,#?V0 + 0
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000074   8F..         MOV     ?V0 + 0,R7
   \   000076   75..00       MOV     ?V0 + 1,#0x0
   \   000079   78..         MOV     R0,#?V0 + 0
   \   00007B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007E   75..01       MOV     ?V0 + 0,#0x1
   \   000081   78..         MOV     R0,#?V0 + 0
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000086   7920         MOV     R1,#0x20
   \   000088   EA           MOV     A,R2
   \   000089   240F         ADD     A,#0xf
   \   00008B   FC           MOV     R4,A
   \   00008C   EB           MOV     A,R3
   \   00008D   3400         ADDC    A,#0x0
   \   00008F   FD           MOV     R5,A
   \   000090   7409         MOV     A,#0x9
   \   000092   12....       LCALL   ?XSTACK_DISP0_8
   \   000095   AA82         MOV     R2,DPL
   \   000097   AB83         MOV     R3,DPH
   \   000099   12....       LCALL   ??AF_DataRequest?relay
   \   00009C   7409         MOV     A,#0x9
   \   00009E   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A1   E9           MOV     A,R1
   \   0000A2   7011         JNZ     ??SendData_2
    437              {
    438                  HalLedBlink( HAL_LED_1, 1, 50, 250 );
   \   0000A4                ; Setup parameters for call to function HalLedBlink
   \   0000A4   7CFA         MOV     R4,#-0x6
   \   0000A6   7D00         MOV     R5,#0x0
   \   0000A8   7B32         MOV     R3,#0x32
   \   0000AA   7A01         MOV     R2,#0x1
   \   0000AC   7901         MOV     R1,#0x1
   \   0000AE   12....       LCALL   ??HalLedBlink?relay
    439                  return 1;
   \   0000B1   7901         MOV     R1,#0x1
   \   0000B3   8002         SJMP    ??SendData_3
    440              }
    441              else
    442              {
    443                  return 0;
   \                     ??SendData_2:
   \   0000B5   7900         MOV     R1,#0x0
   \                     ??SendData_3:
   \   0000B7   740C         MOV     A,#0xc
   \   0000B9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BC   7F04         MOV     R7,#0x4
   \   0000BE   02....       LJMP    ?BANKED_LEAVE_XDATA
    444              }
    445          }

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??transID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    446          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    447          void CreateUserTimer(struct ep_info_t *ep, uint8 seconds)
   \                     CreateUserTimer:
    448          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    449              if(ep == NULL)
   \   000007   EA           MOV     A,R2
   \   000008   4B           ORL     A,R3
   \   000009   6029         JZ      ??CreateUserTimer_0
    450                  return;
    451              if(ep->res_available == NULL)
   \   00000B   12....       LCALL   ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00000E   6024         JZ      ??CreateUserTimer_0
    452                  return;
    453              ep->userTimer = seconds;
   \   000010   EA           MOV     A,R2
   \   000011   240E         ADD     A,#0xe
   \   000013   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000016   EE           MOV     A,R6
   \   000017   F0           MOVX    @DPTR,A
    454              if(isUserTimerRunning == 0)
   \   000018   90....       MOV     DPTR,#isUserTimerRunning
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   7016         JNZ     ??CreateUserTimer_0
    455              {
    456                  osal_start_timerEx(controlTaskId,
    457                                     SAPP_SEND_PERIODIC_MSG_EVT,
    458                                     1000);
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CE8         MOV     R4,#-0x18
   \   000020   7D03         MOV     R5,#0x3
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#controlTaskId
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    459                  isUserTimerRunning = 1;
   \   00002E   90....       MOV     DPTR,#isUserTimerRunning
   \   000031   7401         MOV     A,#0x1
   \   000033   F0           MOVX    @DPTR,A
   \                     ??CreateUserTimer_0:
   \   000034   7F01         MOV     R7,#0x1
   \   000036   02....       LJMP    ?BANKED_LEAVE_XDATA
    460              }
    461          }
    462          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    463          void DeleteUserTimer(struct ep_info_t *ep)
   \                     DeleteUserTimer:
    464          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    465              if(ep == NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   6003         JZ      ??CrossCallReturnLabel_89
    466                  return;
    467              ep->userTimer = 0;
   \   000008   12....       LCALL   ?Subroutine13 & 0xFFFF
    468          }
   \                     ??CrossCallReturnLabel_89:
   \   00000B                REQUIRE ?Subroutine1
   \   00000B                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    469          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    470          void ModifyRefreshCycle(struct ep_info_t *ep, uint8 seconds)
   \                     ModifyRefreshCycle:
    471          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    472              if(ep == NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   6029         JZ      ??ModifyRefreshCycle_0
    473                  return;
    474              if(ep->time_out == NULL)
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   00000F   EC           MOV     A,R4
   \   000010   4D           ORL     A,R5
   \   000011   601E         JZ      ??ModifyRefreshCycle_0
    475                  return;
    476              ep->function.cycle = seconds;
   \   000013   E9           MOV     A,R1
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   F0           MOVX    @DPTR,A
    477              if(ep->timerTick > seconds)
   \   000023   EA           MOV     A,R2
   \   000024   240D         ADD     A,#0xd
   \   000026   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000029   F8           MOV     R0,A
   \   00002A   E9           MOV     A,R1
   \   00002B   C3           CLR     C
   \   00002C   98           SUBB    A,R0
   \   00002D   5002         JNC     ??ModifyRefreshCycle_0
    478                  ep->timerTick = seconds;
   \   00002F   E9           MOV     A,R1
   \   000030   F0           MOVX    @DPTR,A
   \                     ??ModifyRefreshCycle_0:
   \   000031   80..         SJMP    ?Subroutine1
    479          }
    480          
    481          #if ! defined(ZDO_COORDINATOR) && defined(RTR_NWK)
    482          void RouterTimeoutRoutine(struct ep_info_t *ep)
    483          {
    484              SendData(ep->ep, (unsigned char *)&topoBuffer, 0x0000, TRANSFER_ENDPOINT, sizeof(TOPOINFO)); //节点向协调器发送采集数据
    485          }
    486          #endif
    487          
    488          #if defined(ZDO_COORDINATOR)

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    489          void CoordinatorIncomingRoutine(struct ep_info_t *ep, uint16 addr, uint8 endPoint, afMSGCommandFormat_t *msg)
   \                     CoordinatorIncomingRoutine:
    490          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 6,R4
   \   000007   8D..         MOV     ?V0 + 7,R5
   \   000009   89..         MOV     ?V0 + 10,R1
   \   00000B   7416         MOV     A,#0x16
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 4,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 5,A
    491              //msg->Data[], msg->DataLength, msg->TransSeqNumber
    492              // 转发数据到串口
    493              if(msg->DataLength > 0)
   \   000017   85..82       MOV     DPL,?V0 + 4
   \   00001A   F583         MOV     DPH,A
   \   00001C   12....       LCALL   ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00001F   7003         JNZ     $+5
   \   000021   02....       LJMP    ??CoordinatorIncomingRoutine_0 & 0xFFFF
    494              {
    495                  mtUserSerialMsg_t *pMsg = osal_mem_alloc(sizeof(mtUserSerialMsg_t) + msg->DataLength - 1);
   \   000024   85..82       MOV     DPL,?V0 + 4
   \   000027   85..83       MOV     DPH,?V0 + 5
   \   00002A   A3           INC     DPTR
   \   00002B   8582..       MOV     ?V0 + 2,DPL
   \   00002E   8583..       MOV     ?V0 + 3,DPH
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   E0           MOVX    A,@DPTR
   \   000032   2409         ADD     A,#0x9
   \   000034   FA           MOV     R2,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   3400         ADDC    A,#0x0
   \   000039   FB           MOV     R3,A
   \   00003A   12....       LCALL   ??osal_mem_alloc?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   AE..         MOV     R6,?V0 + 0
   \   000043   AF..         MOV     R7,?V0 + 1
    496                  pMsg->sop = MT_UART_SOF;
   \   000045   8E82         MOV     DPL,R6
   \   000047   8F83         MOV     DPH,R7
   \   000049   A3           INC     DPTR
   \   00004A   8582..       MOV     ?V0 + 12,DPL
   \   00004D   8583..       MOV     ?V0 + 13,DPH
   \   000050   7402         MOV     A,#0x2
   \   000052   F0           MOVX    @DPTR,A
    497                  pMsg->len = msg->DataLength + 6;
   \   000053   EE           MOV     A,R6
   \   000054   2402         ADD     A,#0x2
   \   000056   F5..         MOV     ?V0 + 0,A
   \   000058   EF           MOV     A,R7
   \   000059   3400         ADDC    A,#0x0
   \   00005B   F5..         MOV     ?V0 + 1,A
   \   00005D   85..82       MOV     DPL,?V0 + 2
   \   000060   85..83       MOV     DPH,?V0 + 3
   \   000063   E0           MOVX    A,@DPTR
   \   000064   2406         ADD     A,#0x6
   \   000066   85..82       MOV     DPL,?V0 + 0
   \   000069   85..83       MOV     DPH,?V0 + 1
   \   00006C   F0           MOVX    @DPTR,A
    498                  pMsg->cmd = 0x0018;
   \   00006D   EE           MOV     A,R6
   \   00006E   2403         ADD     A,#0x3
   \   000070   F5..         MOV     ?V0 + 8,A
   \   000072   EF           MOV     A,R7
   \   000073   3400         ADDC    A,#0x0
   \   000075   F5..         MOV     ?V0 + 9,A
   \   000077   85..82       MOV     DPL,?V0 + 8
   \   00007A   F583         MOV     DPH,A
   \   00007C   7418         MOV     A,#0x18
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F   A3           INC     DPTR
   \   000080   E4           CLR     A
   \   000081   12....       LCALL   ?Subroutine25 & 0xFFFF
    499                  pMsg->cmdEndPoint = 0xF1;
   \                     ??CrossCallReturnLabel_34:
   \   000084   74F1         MOV     A,#-0xf
   \   000086   12....       LCALL   ?Subroutine18 & 0xFFFF
    500                  pMsg->addr = addr;
   \                     ??CrossCallReturnLabel_20:
   \   000089   E5..         MOV     A,?V0 + 6
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C   A3           INC     DPTR
   \   00008D   E5..         MOV     A,?V0 + 7
   \   00008F   12....       LCALL   ?Subroutine18 & 0xFFFF
    501                  pMsg->endPoint = endPoint;
   \                     ??CrossCallReturnLabel_21:
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   E5..         MOV     A,?V0 + 10
   \   000096   F0           MOVX    @DPTR,A
    502                  memcpy(pMsg->data, msg->Data, msg->DataLength);
   \   000097                ; Setup parameters for call to function memcpy
   \   000097   85..82       MOV     DPL,?V0 + 2
   \   00009A   85..83       MOV     DPH,?V0 + 3
   \   00009D   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000A0   85..82       MOV     DPL,?V0 + 4
   \   0000A3   85..83       MOV     DPH,?V0 + 5
   \   0000A6   12....       LCALL   ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   0000A9   EE           MOV     A,R6
   \   0000AA   2409         ADD     A,#0x9
   \   0000AC   FA           MOV     R2,A
   \   0000AD   EF           MOV     A,R7
   \   0000AE   3400         ADDC    A,#0x0
   \   0000B0   FB           MOV     R3,A
   \   0000B1   12....       LCALL   ??memcpy?relay
   \   0000B4   7402         MOV     A,#0x2
   \   0000B6   12....       LCALL   ?DEALLOC_XSTACK8
    503                  pMsg->fsc = MT_UartCalcFCS(0, &pMsg->len, 1);
   \   0000B9                ; Setup parameters for call to function MT_UartCalcFCS
   \   0000B9   7C01         MOV     R4,#0x1
   \   0000BB   AA..         MOV     R2,?V0 + 0
   \   0000BD   AB..         MOV     R3,?V0 + 1
   \   0000BF   7900         MOV     R1,#0x0
   \   0000C1   12....       LCALL   ?Subroutine22 & 0xFFFF
    504                  pMsg->fsc = MT_UartCalcFCS(pMsg->fsc, pMsg->dataBody, pMsg->len);
   \                     ??CrossCallReturnLabel_28:
   \   0000C4                ; Setup parameters for call to function MT_UartCalcFCS
   \   0000C4   85..82       MOV     DPL,?V0 + 0
   \   0000C7   85..83       MOV     DPH,?V0 + 1
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   FC           MOV     R4,A
   \   0000CC   AA..         MOV     R2,?V0 + 8
   \   0000CE   AB..         MOV     R3,?V0 + 9
   \   0000D0   12....       LCALL   ?Subroutine22 & 0xFFFF
    505                  HalUARTWrite(HAL_UART_PORT_0, &pMsg->sop, sizeof(mtUserSerialMsg_t) - 2 + msg->DataLength);
   \                     ??CrossCallReturnLabel_29:
   \   0000D3                ; Setup parameters for call to function HalUARTWrite
   \   0000D3   85..82       MOV     DPL,?V0 + 2
   \   0000D6   85..83       MOV     DPH,?V0 + 3
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   2408         ADD     A,#0x8
   \   0000DC   FC           MOV     R4,A
   \   0000DD   A3           INC     DPTR
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   3400         ADDC    A,#0x0
   \   0000E1   FD           MOV     R5,A
   \   0000E2   AA..         MOV     R2,?V0 + 12
   \   0000E4   AB..         MOV     R3,?V0 + 13
   \   0000E6   7900         MOV     R1,#0x0
   \   0000E8   12....       LCALL   ??HalUARTWrite?relay
    506                  HalUARTWrite(HAL_UART_PORT_0, &pMsg->fsc, 1);
   \   0000EB                ; Setup parameters for call to function HalUARTWrite
   \   0000EB   7C01         MOV     R4,#0x1
   \   0000ED   7D00         MOV     R5,#0x0
   \   0000EF   EE           MOV     A,R6
   \   0000F0   FA           MOV     R2,A
   \   0000F1   EF           MOV     A,R7
   \   0000F2   FB           MOV     R3,A
   \   0000F3   7900         MOV     R1,#0x0
   \   0000F5   12....       LCALL   ??HalUARTWrite?relay
    507                  osal_mem_free(pMsg);
   \   0000F8                ; Setup parameters for call to function osal_mem_free
   \   0000F8   EE           MOV     A,R6
   \   0000F9   FA           MOV     R2,A
   \   0000FA   EF           MOV     A,R7
   \   0000FB   FB           MOV     R3,A
   \   0000FC   12....       LCALL   ??osal_mem_free?relay
    508              }
    509          }
   \                     ??CoordinatorIncomingRoutine_0:
   \   0000FF   7F0E         MOV     R7,#0xe
   \   000101   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ??MT_UartCalcFCS?relay
   \   000003   E9           MOV     A,R1
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   F0           MOVX    @DPTR,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for topoBuffer>`:
   \   000000   02           DB 2
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   0000         DW 0
   \   00000B   0000         DW 0
   \   00000D   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for commonClusterId>`:
   \   000000   0100         DW 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??sapp_taskInitProcess?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sapp_taskInitProcess

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??createEndPoint?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    createEndPoint

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??sapp_controlEpProcess?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sapp_controlEpProcess

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??sapp_functionEpProcess?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sapp_functionEpProcess

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SendData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??CreateUserTimer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    CreateUserTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??DeleteUserTimer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DeleteUserTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ModifyRefreshCycle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ModifyRefreshCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??CoordinatorIncomingRoutine?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    CoordinatorIncomingRoutine

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {3, 0, 0}>`:
   \   000000   03           DB 3
   \   000001   00           DB 0
   \   000002   00           DB 0
    510          #endif
    511          #endif//SAPP_ZSTACK

   Maximum stack usage in bytes:

     Function                   ISTACK PSTACK XSTACK
     --------                   ------ ------ ------
     CoordinatorIncomingRoutine     1      0     26
       -> osal_mem_alloc            0      0     44
       -> memcpy                    0      0     48
       -> MT_UartCalcFCS            0      0     44
       -> MT_UartCalcFCS            0      0     44
       -> HalUARTWrite              0      0     44
       -> HalUARTWrite              0      0     44
       -> osal_mem_free             0      0     44
     CreateUserTimer                1      0      9
       -> osal_start_timerEx        0      0     18
     DeleteUserTimer                2      0      0
     ModifyRefreshCycle             3      0      0
     SendData                       1      0     57
       -> AF_DataRequest            0      0     66
       -> HalLedBlink               0      0     48
     createEndPoint                 1      0     20
       -> afRegister                0      0     20
     sapp_controlEpProcess          2      0     25
       -> osal_msg_receive          0      0     44
       -> NLME_GetExtAddr           0      0     48
       -> memcpy                    0      0     48
       -> osal_memcpy               0      0     50
       -> osal_memcpy               0      0     50
       -> SendData                  0      0     48
       -> HalLedBlink               0      0     44
       -> osal_msg_deallocate       0      0     44
       -> osal_msg_receive          0      0     44
       -> SendData                  0      0     48
       -> HalLedBlink               0      0     44
       -> SendData                  0      0     48
       -> SendData                  0      0     48
       -> SendData                  0      0     48
       -> HalLedBlink               0      0     44
       -> osal_start_timerEx        0      0     44
       -> osal_stop_timerEx         0      0     44
     sapp_functionEpProcess         1      0     19
       -> osal_msg_receive          0      0     34
       -> osal_msg_deallocate       0      0     34
       -> osal_msg_receive          0      0     34
       -> HalLedBlink               0      0     34
       -> osal_start_timerEx        0      0     34
       -> osal_stop_timerEx         0      0     34
       -> osal_start_timerEx        0      0     34
     sapp_taskInitProcess           1      0     10
       -> osal_mem_alloc            0      0     20
       -> HalIOInit                 0      0     20
       -> createEndPoint            0      0     20
       -> createEndPoint            0      0     20
       -> MT_UartRegisterTaskID     0      0     20


   Segment part sizes:

     Function/Label                     Bytes
     --------------                     -----
     topoBuffer                           14
     funcTableBuffer                       2
     curNwkState                           1
     controlTaskId                         1
     functionTaskId                        1
     controlEndPointInfo                  33
     isUserTimerRunning                    1
     sapp_taskInitProcess                258
     ?Subroutine0                          5
     ?Subroutine20                        16
     ??Subroutine28_0                      7
     ?Subroutine9                         16
     ??Subroutine30_0                      2
     ??Subroutine31_0                      2
     ??Subroutine32_0                      1
     ??Subroutine33_0                      1
     ??Subroutine34_0                      8
     ?Subroutine17                         6
     ?Subroutine24                        15
     ?Subroutine21                         9
     ?Subroutine7                          8
     ?Subroutine23                        14
     ?Subroutine4                         10
     ??Subroutine37_0                      7
     ?Subroutine3                         13
     ?Subroutine27                         8
     createEndPoint                      170
     ?Subroutine16                         3
     ??Subroutine35_0                      4
     ?Subroutine15                         8
     ?Subroutine14                        12
     ?Subroutine26                         3
     ??Subroutine40_0                      5
     ?Subroutine13                         3
     ??Subroutine41_0                      6
     commonClusterId                       2
     ?Subroutine2                          2
     ??Subroutine29_0                      4
     sapp_controlEpProcess               880
     ?Subroutine19                        10
     ?Subroutine10                         9
     ??Subroutine36_0                      6
     ?Subroutine5                         23
     ?Subroutine12                         3
     ??Subroutine38_0                      3
     ??Subroutine39_0                      5
     ?Subroutine6                          4
     ??Subroutine42_0                      2
     ??Subroutine43_0                      1
     ??Subroutine44_0                      9
     sapp_functionEpProcess              582
     ?Subroutine11                         9
     ?Subroutine8                         15
     SendData                            193
     transID                               1
     CreateUserTimer                      57
     DeleteUserTimer                      11
     ?Subroutine1                          7
     ModifyRefreshCycle                   51
     CoordinatorIncomingRoutine          260
     ?Subroutine22                        10
     ?Subroutine18                         5
     ?Subroutine25                        11
     ?<Initializer for topoBuffer>        14
     ?<Initializer for commonClusterId>    2
     ??sapp_taskInitProcess?relay          6
     ??createEndPoint?relay                6
     ??sapp_controlEpProcess?relay         6
     ??sapp_functionEpProcess?relay        6
     ??SendData?relay                      6
     ??CreateUserTimer?relay               6
     ??DeleteUserTimer?relay               6
     ??ModifyRefreshCycle?relay            6
     ??CoordinatorIncomingRoutine?relay    6
     ?<Constant {3, 0, 0}>                 3

 
 2 792 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
    16 bytes in segment XDATA_I
    16 bytes in segment XDATA_ID
     3 bytes in segment XDATA_ROM_C
    40 bytes in segment XDATA_Z
 
 2 862 bytes of CODE  memory
     3 bytes of CONST memory
    56 bytes of XDATA memory

Errors: none
Warnings: none
